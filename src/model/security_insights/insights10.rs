//
// Copyright 2023 The Skootrs Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! This file is generated by typify through Spector. Do not edit it directly.
//! Exceptions to this rule are for cases where typify doesn't genrate the correct code.
#![allow(clippy::all)]
#![allow(unknown_lints)]
#![allow(warnings)]
#![allow(clippy::return_self_not_must_use)]
#![allow(clippy::default_trait_access)]
#![allow(clippy::unwrap_used)]
use serde::{Deserialize, Serialize};
use utoipa::ToSchema;
///YAML schema for security-insights.yml
#[derive(Clone, Debug, Deserialize, Serialize, schemars::JsonSchema, ToSchema)]
#[serde(deny_unknown_fields)]
pub struct SecurityInsightsVersion100YamlSchema {
    #[serde(rename = "contribution-policy")]
    pub contribution_policy: SecurityInsightsVersion100YamlSchemaContributionPolicy,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dependencies: Option<SecurityInsightsVersion100YamlSchemaDependencies>,
    #[serde(rename = "distribution-points")]
    pub distribution_points: Vec<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub documentation: Option<Vec<String>>,
    pub header: SecurityInsightsVersion100YamlSchemaHeader,
    #[serde(rename = "project-lifecycle")]
    pub project_lifecycle: SecurityInsightsVersion100YamlSchemaProjectLifecycle,
    #[serde(
        rename = "security-artifacts",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub security_artifacts: Option<
        SecurityInsightsVersion100YamlSchemaSecurityArtifacts,
    >,
    #[serde(
        rename = "security-assessments",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub security_assessments: Option<
        Vec<SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItem>,
    >,
    #[serde(rename = "security-contacts")]
    pub security_contacts: Vec<SecurityInsightsVersion100YamlSchemaSecurityContactsItem>,
    #[serde(rename = "security-testing", default, skip_serializing_if = "Vec::is_empty")]
    pub security_testing: Vec<SecurityInsightsVersion100YamlSchemaSecurityTestingItem>,
    #[serde(rename = "vulnerability-reporting")]
    pub vulnerability_reporting: SecurityInsightsVersion100YamlSchemaVulnerabilityReporting,
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchema {
    fn from(value: &Self) -> Self {
        value.clone()
    }
}
impl SecurityInsightsVersion100YamlSchema {
    #[must_use] pub fn builder() -> builder::SecurityInsightsVersion100YamlSchema {
        builder::SecurityInsightsVersion100YamlSchema::default()
    }
}
#[derive(Clone, Debug, Deserialize, Serialize, schemars::JsonSchema, ToSchema)]
#[serde(deny_unknown_fields)]
pub struct SecurityInsightsVersion100YamlSchemaContributionPolicy {
    ///Define if the maintainers accept pull-requests generated by bots or automated tools.
    #[serde(rename = "accepts-automated-pull-requests")]
    pub accepts_automated_pull_requests: bool,
    ///Define if the maintainers accept pull-requests or not from external contributors.
    #[serde(rename = "accepts-pull-requests")]
    pub accepts_pull_requests: bool,
    ///List of allowed and denied bots. This property can overwrite `accepts-automated-pull-requests`.
    #[serde(
        rename = "automated-tools-list",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub automated_tools_list: Option<
        Vec<SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItem>,
    >,
    ///Link to the project code of conduct.
    #[serde(
        rename = "code-of-conduct",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub code_of_conduct: Option<String>,
    ///Link to the contributing policy.
    #[serde(
        rename = "contributing-policy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub contributing_policy: Option<String>,
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaContributionPolicy {
    fn from(value: &Self) -> Self {
        value.clone()
    }
}
impl SecurityInsightsVersion100YamlSchemaContributionPolicy {
    #[must_use] pub fn builder() -> builder::SecurityInsightsVersion100YamlSchemaContributionPolicy {
        builder::SecurityInsightsVersion100YamlSchemaContributionPolicy::default()
    }
}
#[derive(Clone, Debug, Deserialize, Serialize, schemars::JsonSchema, ToSchema)]
#[serde(deny_unknown_fields)]
pub struct SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItem {
    ///Define if automated actions are allowed or denied.
    pub action: SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItemAction,
    ///Automated tool or bot name.
    #[serde(rename = "automated-tool")]
    pub automated_tool: String,
    ///Short comment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<
        SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItemComment,
    >,
    ///Define sub-paths where the automated actions are allowed or denied.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<String>>,
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItem {
    fn from(
        value: &Self,
    ) -> Self {
        value.clone()
    }
}
impl SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItem {
    #[must_use] pub fn builder() -> builder::SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItem {
        builder::SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItem::default()
    }
}
///Define if automated actions are allowed or denied.
#[derive(
    Clone,
    Copy,
    Debug,
    Deserialize,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
    Serialize,
    schemars::JsonSchema
)]
pub enum SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItemAction {
    #[serde(rename = "allowed")]
    Allowed,
    #[serde(rename = "denied")]
    Denied,
}
impl From<
    &Self,
>
for SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItemAction {
    fn from(
        value: &Self,
    ) -> Self {
        value.clone()
    }
}
impl ToString
for SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItemAction {
    fn to_string(&self) -> String {
        match *self {
            Self::Allowed => "allowed".to_string(),
            Self::Denied => "denied".to_string(),
        }
    }
}
impl std::str::FromStr
for SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItemAction {
    type Err = &'static str;
    fn from_str(value: &str) -> Result<Self, &'static str> {
        match value {
            "allowed" => Ok(Self::Allowed),
            "denied" => Ok(Self::Denied),
            _ => Err("invalid value"),
        }
    }
}
impl std::convert::TryFrom<&str>
for SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItemAction {
    type Error = &'static str;
    fn try_from(value: &str) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
for SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItemAction {
    type Error = &'static str;
    fn try_from(value: &String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
for SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItemAction {
    type Error = &'static str;
    fn try_from(value: String) -> Result<Self, &'static str> {
        value.parse()
    }
}
///Short comment.
#[derive(
    Clone,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
    Serialize,
    schemars::JsonSchema,
    ToSchema
)]
pub struct SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItemComment(
    String,
);
impl std::ops::Deref
for SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItemComment {
    type Target = String;
    fn deref(&self) -> &String {
        &self.0
    }
}
impl From<
    SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItemComment,
> for String {
    fn from(
        value: SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItemComment,
    ) -> Self {
        value.0
    }
}
impl From<
    &Self,
>
for SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItemComment {
    fn from(
        value: &Self,
    ) -> Self {
        value.clone()
    }
}
impl std::str::FromStr
for SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItemComment {
    type Err = &'static str;
    fn from_str(value: &str) -> Result<Self, &'static str> {
        if regress::Regex::new("^(.|\\n){1,560}$").unwrap().find(value).is_none() {
            return Err("doesn't match pattern \"^(.|\\n){1,560}$\"");
        }
        Ok(Self(value.to_string()))
    }
}
impl std::convert::TryFrom<&str>
for SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItemComment {
    type Error = &'static str;
    fn try_from(value: &str) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
for SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItemComment {
    type Error = &'static str;
    fn try_from(value: &String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
for SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItemComment {
    type Error = &'static str;
    fn try_from(value: String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl<'de> serde::Deserialize<'de>
for SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItemComment {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        String::deserialize(deserializer)?
            .parse()
            .map_err(|e: &'static str| {
                <D::Error as serde::de::Error>::custom(e.to_string())
            })
    }
}
#[derive(Clone, Debug, Deserialize, Serialize, schemars::JsonSchema, ToSchema)]
#[serde(deny_unknown_fields)]
pub struct SecurityInsightsVersion100YamlSchemaDependencies {
    #[serde(
        rename = "dependencies-lifecycle",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub dependencies_lifecycle: Option<
        SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycle,
    >,
    #[serde(
        rename = "dependencies-lists",
        default,
        skip_serializing_if = "Vec::is_empty"
    )]
    pub dependencies_lists: Vec<String>,
    #[serde(
        rename = "env-dependencies-policy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub env_dependencies_policy: Option<
        SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicy,
    >,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sbom: Option<Vec<SecurityInsightsVersion100YamlSchemaDependenciesSbomItem>>,
    ///Define if the project uses third-party packages.
    #[serde(
        rename = "third-party-packages",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub third_party_packages: Option<bool>,
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaDependencies {
    fn from(value: &Self) -> Self {
        value.clone()
    }
}
impl SecurityInsightsVersion100YamlSchemaDependencies {
    #[must_use] pub fn builder() -> builder::SecurityInsightsVersion100YamlSchemaDependencies {
        builder::SecurityInsightsVersion100YamlSchemaDependencies::default()
    }
}
#[derive(Clone, Debug, Deserialize, Serialize, schemars::JsonSchema, ToSchema)]
#[serde(deny_unknown_fields)]
pub struct SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycle {
    ///Summary about the dependencies lifecycle policy, third-party packages updating process, and deprecation process. Maximum length 560 chars.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<
        SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycleComment,
    >,
    ///Link to the dependencies lifecycle policy.
    #[serde(rename = "policy-url", default, skip_serializing_if = "Option::is_none")]
    pub policy_url: Option<String>,
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycle {
    fn from(
        value: &Self,
    ) -> Self {
        value.clone()
    }
}
impl SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycle {
    #[must_use] pub fn builder() -> builder::SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycle {
        builder::SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycle::default()
    }
}
///Summary about the dependencies lifecycle policy, third-party packages updating process, and deprecation process. Maximum length 560 chars.
#[derive(
    Clone,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
    Serialize,
    schemars::JsonSchema,
    ToSchema
)]
pub struct SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycleComment(
    String,
);
impl std::ops::Deref
for SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycleComment {
    type Target = String;
    fn deref(&self) -> &String {
        &self.0
    }
}
impl From<SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycleComment>
for String {
    fn from(
        value: SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycleComment,
    ) -> Self {
        value.0
    }
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycleComment {
    fn from(
        value: &Self,
    ) -> Self {
        value.clone()
    }
}
impl std::str::FromStr
for SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycleComment {
    type Err = &'static str;
    fn from_str(value: &str) -> Result<Self, &'static str> {
        if regress::Regex::new("^(.|\\n){1,560}$").unwrap().find(value).is_none() {
            return Err("doesn't match pattern \"^(.|\\n){1,560}$\"");
        }
        Ok(Self(value.to_string()))
    }
}
impl std::convert::TryFrom<&str>
for SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycleComment {
    type Error = &'static str;
    fn try_from(value: &str) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
for SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycleComment {
    type Error = &'static str;
    fn try_from(value: &String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
for SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycleComment {
    type Error = &'static str;
    fn try_from(value: String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl<'de> serde::Deserialize<'de>
for SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycleComment {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        String::deserialize(deserializer)?
            .parse()
            .map_err(|e: &'static str| {
                <D::Error as serde::de::Error>::custom(e.to_string())
            })
    }
}
#[derive(Clone, Debug, Deserialize, Serialize, schemars::JsonSchema, ToSchema)]
#[serde(deny_unknown_fields)]
pub struct SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicy {
    ///Summary about how third-party dependencies are adopted and consumed in the different environments (dev, test, prod). Maximum length 560 chars.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<
        SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicyComment,
    >,
    ///Link to the enviroment dependencies policy.
    #[serde(rename = "policy-url", default, skip_serializing_if = "Option::is_none")]
    pub policy_url: Option<String>,
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicy {
    fn from(
        value: &Self,
    ) -> Self {
        value.clone()
    }
}
impl SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicy {
    #[must_use] pub fn builder() -> builder::SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicy {
        builder::SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicy::default()
    }
}
///Summary about how third-party dependencies are adopted and consumed in the different environments (dev, test, prod). Maximum length 560 chars.
#[derive(
    Clone,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
    Serialize,
    schemars::JsonSchema,
    ToSchema
)]
pub struct SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicyComment(
    String,
);
impl std::ops::Deref
for SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicyComment {
    type Target = String;
    fn deref(&self) -> &String {
        &self.0
    }
}
impl From<SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicyComment>
for String {
    fn from(
        value: SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicyComment,
    ) -> Self {
        value.0
    }
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicyComment {
    fn from(
        value: &Self,
    ) -> Self {
        value.clone()
    }
}
impl std::str::FromStr
for SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicyComment {
    type Err = &'static str;
    fn from_str(value: &str) -> Result<Self, &'static str> {
        if regress::Regex::new("^(.|\\n){1,560}$").unwrap().find(value).is_none() {
            return Err("doesn't match pattern \"^(.|\\n){1,560}$\"");
        }
        Ok(Self(value.to_string()))
    }
}
impl std::convert::TryFrom<&str>
for SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicyComment {
    type Error = &'static str;
    fn try_from(value: &str) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
for SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicyComment {
    type Error = &'static str;
    fn try_from(value: &String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
for SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicyComment {
    type Error = &'static str;
    fn try_from(value: String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl<'de> serde::Deserialize<'de>
for SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicyComment {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        String::deserialize(deserializer)?
            .parse()
            .map_err(|e: &'static str| {
                <D::Error as serde::de::Error>::custom(e.to_string())
            })
    }
}
#[derive(Clone, Debug, Deserialize, Serialize, schemars::JsonSchema, ToSchema)]
#[serde(deny_unknown_fields)]
pub struct SecurityInsightsVersion100YamlSchemaDependenciesSbomItem {
    ///Description of how the SBOM is created. Maximum length 560 characters.
    #[serde(rename = "sbom-creation", default, skip_serializing_if = "Option::is_none")]
    pub sbom_creation: Option<
        SecurityInsightsVersion100YamlSchemaDependenciesSbomItemSbomCreation,
    >,
    ///Link to the SBOM file.
    #[serde(rename = "sbom-file", default, skip_serializing_if = "Option::is_none")]
    pub sbom_file: Option<String>,
    ///Name of the SBOM standard used.
    #[serde(rename = "sbom-format", default, skip_serializing_if = "Option::is_none")]
    pub sbom_format: Option<String>,
    ///Link to the SBOM standard website or documentation.
    #[serde(rename = "sbom-url", default, skip_serializing_if = "Option::is_none")]
    pub sbom_url: Option<String>,
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaDependenciesSbomItem {
    fn from(value: &Self) -> Self {
        value.clone()
    }
}
impl SecurityInsightsVersion100YamlSchemaDependenciesSbomItem {
    #[must_use] pub fn builder() -> builder::SecurityInsightsVersion100YamlSchemaDependenciesSbomItem {
        builder::SecurityInsightsVersion100YamlSchemaDependenciesSbomItem::default()
    }
}
///Description of how the SBOM is created. Maximum length 560 characters.
#[derive(
    Clone,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
    Serialize,
    schemars::JsonSchema,
    ToSchema
)]
pub struct SecurityInsightsVersion100YamlSchemaDependenciesSbomItemSbomCreation(String);
impl std::ops::Deref
for SecurityInsightsVersion100YamlSchemaDependenciesSbomItemSbomCreation {
    type Target = String;
    fn deref(&self) -> &String {
        &self.0
    }
}
impl From<SecurityInsightsVersion100YamlSchemaDependenciesSbomItemSbomCreation>
for String {
    fn from(
        value: SecurityInsightsVersion100YamlSchemaDependenciesSbomItemSbomCreation,
    ) -> Self {
        value.0
    }
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaDependenciesSbomItemSbomCreation {
    fn from(
        value: &Self,
    ) -> Self {
        value.clone()
    }
}
impl std::str::FromStr
for SecurityInsightsVersion100YamlSchemaDependenciesSbomItemSbomCreation {
    type Err = &'static str;
    fn from_str(value: &str) -> Result<Self, &'static str> {
        if regress::Regex::new("^(.|\\n){1,560}$").unwrap().find(value).is_none() {
            return Err("doesn't match pattern \"^(.|\\n){1,560}$\"");
        }
        Ok(Self(value.to_string()))
    }
}
impl std::convert::TryFrom<&str>
for SecurityInsightsVersion100YamlSchemaDependenciesSbomItemSbomCreation {
    type Error = &'static str;
    fn try_from(value: &str) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
for SecurityInsightsVersion100YamlSchemaDependenciesSbomItemSbomCreation {
    type Error = &'static str;
    fn try_from(value: &String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
for SecurityInsightsVersion100YamlSchemaDependenciesSbomItemSbomCreation {
    type Error = &'static str;
    fn try_from(value: String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl<'de> serde::Deserialize<'de>
for SecurityInsightsVersion100YamlSchemaDependenciesSbomItemSbomCreation {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        String::deserialize(deserializer)?
            .parse()
            .map_err(|e: &'static str| {
                <D::Error as serde::de::Error>::custom(e.to_string())
            })
    }
}
#[derive(Clone, Debug, Deserialize, Serialize, schemars::JsonSchema, ToSchema)]
#[serde(deny_unknown_fields)]
pub struct SecurityInsightsVersion100YamlSchemaHeader {
    ///Link to the project changelog.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub changelog: Option<String>,
    ///The last commit to which the SECURITY-INSIGHTS.yml refers.
    #[serde(rename = "commit-hash", default, skip_serializing_if = "Option::is_none")]
    pub commit_hash: Option<SecurityInsightsVersion100YamlSchemaHeaderCommitHash>,
    ///Expiration date for the SECURITY-INSIGHTS.yml. At most a year later the `last-reviewed` date.
    #[serde(rename = "expiration-date")]
    pub expiration_date: chrono::DateTime<chrono::offset::Utc>,
    ///Last time the SECURITY-INSIGHTS.yml was reviewed. Updating this property requires updating the property `commit-hash`.
    #[serde(rename = "last-reviewed", default, skip_serializing_if = "Option::is_none")]
    pub last_reviewed: Option<chrono::DateTime<chrono::offset::Utc>>,
    ///Last time the SECURITY-INSIGHTS.yml was updated, excluding the properties `commit-hash` and `last-reviewed`.
    #[serde(rename = "last-updated", default, skip_serializing_if = "Option::is_none")]
    pub last_updated: Option<chrono::DateTime<chrono::offset::Utc>>,
    ///Link to the project license.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub license: Option<String>,
    ///Release version to which the SECURITY-INSIGHTS.yml refers.
    #[serde(
        rename = "project-release",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub project_release: Option<String>,
    ///Link to the open-source project.
    #[serde(rename = "project-url")]
    pub project_url: String,
    ///Version of the SECURITY-INSIGHTS YAML Schema.
    #[serde(rename = "schema-version")]
    pub schema_version: SecurityInsightsVersion100YamlSchemaHeaderSchemaVersion,
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaHeader {
    fn from(value: &Self) -> Self {
        value.clone()
    }
}
impl SecurityInsightsVersion100YamlSchemaHeader {
    #[must_use] pub fn builder() -> builder::SecurityInsightsVersion100YamlSchemaHeader {
        builder::SecurityInsightsVersion100YamlSchemaHeader::default()
    }
}
///The last commit to which the SECURITY-INSIGHTS.yml refers.
#[derive(
    Clone,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
    Serialize,
    schemars::JsonSchema,
    ToSchema
)]
pub struct SecurityInsightsVersion100YamlSchemaHeaderCommitHash(String);
impl std::ops::Deref for SecurityInsightsVersion100YamlSchemaHeaderCommitHash {
    type Target = String;
    fn deref(&self) -> &String {
        &self.0
    }
}
impl From<SecurityInsightsVersion100YamlSchemaHeaderCommitHash> for String {
    fn from(value: SecurityInsightsVersion100YamlSchemaHeaderCommitHash) -> Self {
        value.0
    }
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaHeaderCommitHash {
    fn from(value: &Self) -> Self {
        value.clone()
    }
}
impl std::str::FromStr for SecurityInsightsVersion100YamlSchemaHeaderCommitHash {
    type Err = &'static str;
    fn from_str(value: &str) -> Result<Self, &'static str> {
        if regress::Regex::new("^\\b[0-9a-f]{5,40}\\b$").unwrap().find(value).is_none() {
            return Err("doesn't match pattern \"^\\b[0-9a-f]{5,40}\\b$\"");
        }
        Ok(Self(value.to_string()))
    }
}
impl std::convert::TryFrom<&str>
for SecurityInsightsVersion100YamlSchemaHeaderCommitHash {
    type Error = &'static str;
    fn try_from(value: &str) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
for SecurityInsightsVersion100YamlSchemaHeaderCommitHash {
    type Error = &'static str;
    fn try_from(value: &String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
for SecurityInsightsVersion100YamlSchemaHeaderCommitHash {
    type Error = &'static str;
    fn try_from(value: String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl<'de> serde::Deserialize<'de>
for SecurityInsightsVersion100YamlSchemaHeaderCommitHash {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        String::deserialize(deserializer)?
            .parse()
            .map_err(|e: &'static str| {
                <D::Error as serde::de::Error>::custom(e.to_string())
            })
    }
}
///Version of the SECURITY-INSIGHTS YAML Schema.
#[derive(
    Clone,
    Copy,
    Debug,
    Deserialize,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
    Serialize,
    schemars::JsonSchema
)]
pub enum SecurityInsightsVersion100YamlSchemaHeaderSchemaVersion {
    #[serde(rename = "1.0.0")]
    _100,
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaHeaderSchemaVersion {
    fn from(value: &Self) -> Self {
        value.clone()
    }
}
impl ToString for SecurityInsightsVersion100YamlSchemaHeaderSchemaVersion {
    fn to_string(&self) -> String {
        match *self {
            Self::_100 => "1.0.0".to_string(),
        }
    }
}
impl std::str::FromStr for SecurityInsightsVersion100YamlSchemaHeaderSchemaVersion {
    type Err = &'static str;
    fn from_str(value: &str) -> Result<Self, &'static str> {
        match value {
            "1.0.0" => Ok(Self::_100),
            _ => Err("invalid value"),
        }
    }
}
impl std::convert::TryFrom<&str>
for SecurityInsightsVersion100YamlSchemaHeaderSchemaVersion {
    type Error = &'static str;
    fn try_from(value: &str) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
for SecurityInsightsVersion100YamlSchemaHeaderSchemaVersion {
    type Error = &'static str;
    fn try_from(value: &String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
for SecurityInsightsVersion100YamlSchemaHeaderSchemaVersion {
    type Error = &'static str;
    fn try_from(value: String) -> Result<Self, &'static str> {
        value.parse()
    }
}
#[derive(Clone, Debug, Deserialize, Serialize, schemars::JsonSchema, ToSchema)]
#[serde(deny_unknown_fields)]
pub struct SecurityInsightsVersion100YamlSchemaProjectLifecycle {
    ///Maintainers fix bugs without implementing new features. The project is in Maintenance Mode.
    #[serde(rename = "bug-fixes-only")]
    pub bug_fixes_only: bool,
    ///Maintainers contacts (e-mail, Twitter, etc).
    #[serde(
        rename = "core-maintainers",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub core_maintainers: Option<Vec<String>>,
    ///Link to the project release cycle.
    #[serde(rename = "release-cycle", default, skip_serializing_if = "Option::is_none")]
    pub release_cycle: Option<String>,
    ///Shortly describe the release process. Maximum length 560 chars.
    #[serde(
        rename = "release-process",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub release_process: Option<
        SecurityInsightsVersion100YamlSchemaProjectLifecycleReleaseProcess,
    >,
    ///Link to the project roadmap.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub roadmap: Option<String>,
    ///Define if the project is still active or not.
    pub status: SecurityInsightsVersion100YamlSchemaProjectLifecycleStatus,
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaProjectLifecycle {
    fn from(value: &Self) -> Self {
        value.clone()
    }
}
impl SecurityInsightsVersion100YamlSchemaProjectLifecycle {
    #[must_use] pub fn builder() -> builder::SecurityInsightsVersion100YamlSchemaProjectLifecycle {
        builder::SecurityInsightsVersion100YamlSchemaProjectLifecycle::default()
    }
}
///Shortly describe the release process. Maximum length 560 chars.
#[derive(
    Clone,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
    Serialize,
    schemars::JsonSchema,
    ToSchema
)]
pub struct SecurityInsightsVersion100YamlSchemaProjectLifecycleReleaseProcess(String);
impl std::ops::Deref
for SecurityInsightsVersion100YamlSchemaProjectLifecycleReleaseProcess {
    type Target = String;
    fn deref(&self) -> &String {
        &self.0
    }
}
impl From<SecurityInsightsVersion100YamlSchemaProjectLifecycleReleaseProcess>
for String {
    fn from(
        value: SecurityInsightsVersion100YamlSchemaProjectLifecycleReleaseProcess,
    ) -> Self {
        value.0
    }
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaProjectLifecycleReleaseProcess {
    fn from(
        value: &Self,
    ) -> Self {
        value.clone()
    }
}
impl std::str::FromStr
for SecurityInsightsVersion100YamlSchemaProjectLifecycleReleaseProcess {
    type Err = &'static str;
    fn from_str(value: &str) -> Result<Self, &'static str> {
        if regress::Regex::new("^(.|\\n){1,560}$").unwrap().find(value).is_none() {
            return Err("doesn't match pattern \"^(.|\\n){1,560}$\"");
        }
        Ok(Self(value.to_string()))
    }
}
impl std::convert::TryFrom<&str>
for SecurityInsightsVersion100YamlSchemaProjectLifecycleReleaseProcess {
    type Error = &'static str;
    fn try_from(value: &str) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
for SecurityInsightsVersion100YamlSchemaProjectLifecycleReleaseProcess {
    type Error = &'static str;
    fn try_from(value: &String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
for SecurityInsightsVersion100YamlSchemaProjectLifecycleReleaseProcess {
    type Error = &'static str;
    fn try_from(value: String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl<'de> serde::Deserialize<'de>
for SecurityInsightsVersion100YamlSchemaProjectLifecycleReleaseProcess {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        String::deserialize(deserializer)?
            .parse()
            .map_err(|e: &'static str| {
                <D::Error as serde::de::Error>::custom(e.to_string())
            })
    }
}
///Define if the project is still active or not.
#[derive(
    Clone,
    Copy,
    Debug,
    Deserialize,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
    Serialize,
    schemars::JsonSchema
)]
pub enum SecurityInsightsVersion100YamlSchemaProjectLifecycleStatus {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "concept")]
    Concept,
    #[serde(rename = "wip")]
    Wip,
    #[serde(rename = "suspended")]
    Suspended,
    #[serde(rename = "abandoned")]
    Abandoned,
    #[serde(rename = "unsupported")]
    Unsupported,
    #[serde(rename = "moved")]
    Moved,
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaProjectLifecycleStatus {
    fn from(value: &Self) -> Self {
        value.clone()
    }
}
impl ToString for SecurityInsightsVersion100YamlSchemaProjectLifecycleStatus {
    fn to_string(&self) -> String {
        match *self {
            Self::Active => "active".to_string(),
            Self::Inactive => "inactive".to_string(),
            Self::Concept => "concept".to_string(),
            Self::Wip => "wip".to_string(),
            Self::Suspended => "suspended".to_string(),
            Self::Abandoned => "abandoned".to_string(),
            Self::Unsupported => "unsupported".to_string(),
            Self::Moved => "moved".to_string(),
        }
    }
}
impl std::str::FromStr for SecurityInsightsVersion100YamlSchemaProjectLifecycleStatus {
    type Err = &'static str;
    fn from_str(value: &str) -> Result<Self, &'static str> {
        match value {
            "active" => Ok(Self::Active),
            "inactive" => Ok(Self::Inactive),
            "concept" => Ok(Self::Concept),
            "wip" => Ok(Self::Wip),
            "suspended" => Ok(Self::Suspended),
            "abandoned" => Ok(Self::Abandoned),
            "unsupported" => Ok(Self::Unsupported),
            "moved" => Ok(Self::Moved),
            _ => Err("invalid value"),
        }
    }
}
impl std::convert::TryFrom<&str>
for SecurityInsightsVersion100YamlSchemaProjectLifecycleStatus {
    type Error = &'static str;
    fn try_from(value: &str) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
for SecurityInsightsVersion100YamlSchemaProjectLifecycleStatus {
    type Error = &'static str;
    fn try_from(value: &String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
for SecurityInsightsVersion100YamlSchemaProjectLifecycleStatus {
    type Error = &'static str;
    fn try_from(value: String) -> Result<Self, &'static str> {
        value.parse()
    }
}
#[derive(Clone, Debug, Deserialize, Serialize, schemars::JsonSchema, ToSchema)]
#[serde(deny_unknown_fields)]
pub struct SecurityInsightsVersion100YamlSchemaSecurityArtifacts {
    #[serde(rename = "other-artifacts", default, skip_serializing_if = "Vec::is_empty")]
    pub other_artifacts: Vec<serde_json::Value>,
    #[serde(
        rename = "self-assessment",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub self_assessment: Option<
        SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessment,
    >,
    #[serde(rename = "threat-model", default, skip_serializing_if = "Option::is_none")]
    pub threat_model: Option<
        SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModel,
    >,
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaSecurityArtifacts {
    fn from(value: &Self) -> Self {
        value.clone()
    }
}
impl SecurityInsightsVersion100YamlSchemaSecurityArtifacts {
    #[must_use] pub fn builder() -> builder::SecurityInsightsVersion100YamlSchemaSecurityArtifacts {
        builder::SecurityInsightsVersion100YamlSchemaSecurityArtifacts::default()
    }
}
#[derive(Clone, Debug, Deserialize, Serialize, schemars::JsonSchema, ToSchema)]
#[serde(deny_unknown_fields)]
pub struct SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessment {
    ///Additional context regarding the security self assessment or its status. Maximum length 560 chars.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<
        SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessmentComment,
    >,
    #[serde(rename = "evidence-url", default, skip_serializing_if = "Option::is_none")]
    pub evidence_url: Option<Vec<String>>,
    ///Define whether a security self assessment for the project has been created. A false value may be used to add comments regarding the status of the assessment.
    #[serde(rename = "self-assessment-created")]
    pub self_assessment_created: bool,
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessment {
    fn from(
        value: &Self,
    ) -> Self {
        value.clone()
    }
}
impl SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessment {
    #[must_use] pub fn builder() -> builder::SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessment {
        builder::SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessment::default()
    }
}
///Additional context regarding the security self assessment or its status. Maximum length 560 chars.
#[derive(
    Clone,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
    Serialize,
    schemars::JsonSchema,
    ToSchema
)]
pub struct SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessmentComment(
    String,
);
impl std::ops::Deref
for SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessmentComment {
    type Target = String;
    fn deref(&self) -> &String {
        &self.0
    }
}
impl From<SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessmentComment>
for String {
    fn from(
        value: SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessmentComment,
    ) -> Self {
        value.0
    }
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessmentComment {
    fn from(
        value: &Self,
    ) -> Self {
        value.clone()
    }
}
impl std::str::FromStr
for SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessmentComment {
    type Err = &'static str;
    fn from_str(value: &str) -> Result<Self, &'static str> {
        if regress::Regex::new("^(.|\\n){1,560}$").unwrap().find(value).is_none() {
            return Err("doesn't match pattern \"^(.|\\n){1,560}$\"");
        }
        Ok(Self(value.to_string()))
    }
}
impl std::convert::TryFrom<&str>
for SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessmentComment {
    type Error = &'static str;
    fn try_from(value: &str) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
for SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessmentComment {
    type Error = &'static str;
    fn try_from(value: &String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
for SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessmentComment {
    type Error = &'static str;
    fn try_from(value: String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl<'de> serde::Deserialize<'de>
for SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessmentComment {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        String::deserialize(deserializer)?
            .parse()
            .map_err(|e: &'static str| {
                <D::Error as serde::de::Error>::custom(e.to_string())
            })
    }
}
#[derive(Clone, Debug, Deserialize, Serialize, schemars::JsonSchema, ToSchema)]
#[serde(deny_unknown_fields)]
pub struct SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModel {
    ///Additional comment to describe the threat models, giving more context. Maximum length 560 chars.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<
        SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModelComment,
    >,
    #[serde(rename = "evidence-url", default, skip_serializing_if = "Option::is_none")]
    pub evidence_url: Option<Vec<String>>,
    ///Define if the threat model for the project has been created.
    #[serde(rename = "threat-model-created")]
    pub threat_model_created: bool,
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModel {
    fn from(
        value: &Self,
    ) -> Self {
        value.clone()
    }
}
impl SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModel {
    #[must_use] pub fn builder() -> builder::SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModel {
        builder::SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModel::default()
    }
}
///Additional comment to describe the threat models, giving more context. Maximum length 560 chars.
#[derive(
    Clone,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
    Serialize,
    schemars::JsonSchema,
    ToSchema
)]
pub struct SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModelComment(
    String,
);
impl std::ops::Deref
for SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModelComment {
    type Target = String;
    fn deref(&self) -> &String {
        &self.0
    }
}
impl From<SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModelComment>
for String {
    fn from(
        value: SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModelComment,
    ) -> Self {
        value.0
    }
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModelComment {
    fn from(
        value: &Self,
    ) -> Self {
        value.clone()
    }
}
impl std::str::FromStr
for SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModelComment {
    type Err = &'static str;
    fn from_str(value: &str) -> Result<Self, &'static str> {
        if regress::Regex::new("^(.|\\n){1,560}$").unwrap().find(value).is_none() {
            return Err("doesn't match pattern \"^(.|\\n){1,560}$\"");
        }
        Ok(Self(value.to_string()))
    }
}
impl std::convert::TryFrom<&str>
for SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModelComment {
    type Error = &'static str;
    fn try_from(value: &str) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
for SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModelComment {
    type Error = &'static str;
    fn try_from(value: &String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
for SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModelComment {
    type Error = &'static str;
    fn try_from(value: String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl<'de> serde::Deserialize<'de>
for SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModelComment {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        String::deserialize(deserializer)?
            .parse()
            .map_err(|e: &'static str| {
                <D::Error as serde::de::Error>::custom(e.to_string())
            })
    }
}
#[derive(Clone, Debug, Deserialize, Serialize, schemars::JsonSchema, ToSchema)]
#[serde(deny_unknown_fields)]
pub struct SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItem {
    ///Name of the third-party security auditor.
    #[serde(rename = "auditor-name")]
    pub auditor_name: String,
    ///Link to the security report provided by the auditor.
    #[serde(rename = "auditor-report", default, skip_serializing_if = "Option::is_none")]
    pub auditor_report: Option<String>,
    ///Link to the auditor website.
    #[serde(rename = "auditor-url")]
    pub auditor_url: String,
    ///Additional comment to describe the report giving more context. Maximum length 560 chars.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<
        SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItemComment,
    >,
    ///Year of the report.
    #[serde(rename = "report-year")]
    pub report_year: i64,
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItem {
    fn from(
        value: &Self,
    ) -> Self {
        value.clone()
    }
}
impl SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItem {
    #[must_use] pub fn builder() -> builder::SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItem {
        builder::SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItem::default()
    }
}
///Additional comment to describe the report giving more context. Maximum length 560 chars.
#[derive(
    Clone,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
    Serialize,
    schemars::JsonSchema,
    ToSchema
)]
pub struct SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItemComment(String);
impl std::ops::Deref
for SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItemComment {
    type Target = String;
    fn deref(&self) -> &String {
        &self.0
    }
}
impl From<SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItemComment>
for String {
    fn from(
        value: SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItemComment,
    ) -> Self {
        value.0
    }
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItemComment {
    fn from(
        value: &Self,
    ) -> Self {
        value.clone()
    }
}
impl std::str::FromStr
for SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItemComment {
    type Err = &'static str;
    fn from_str(value: &str) -> Result<Self, &'static str> {
        if regress::Regex::new("^(.|\\n){1,560}$").unwrap().find(value).is_none() {
            return Err("doesn't match pattern \"^(.|\\n){1,560}$\"");
        }
        Ok(Self(value.to_string()))
    }
}
impl std::convert::TryFrom<&str>
for SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItemComment {
    type Error = &'static str;
    fn try_from(value: &str) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
for SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItemComment {
    type Error = &'static str;
    fn try_from(value: &String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
for SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItemComment {
    type Error = &'static str;
    fn try_from(value: String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl<'de> serde::Deserialize<'de>
for SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItemComment {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        String::deserialize(deserializer)?
            .parse()
            .map_err(|e: &'static str| {
                <D::Error as serde::de::Error>::custom(e.to_string())
            })
    }
}
#[derive(Clone, Debug, Deserialize, Serialize, schemars::JsonSchema, ToSchema)]
#[serde(deny_unknown_fields)]
pub struct SecurityInsightsVersion100YamlSchemaSecurityContactsItem {
    ///Define if the provided contact is the primary one or not.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub primary: Option<bool>,
    ///Type of contact: `email`, `phone`, or `url`.
    #[serde(rename = "type")]
    pub type_: SecurityInsightsVersion100YamlSchemaSecurityContactsItemType,
    ///Security contact.
    pub value: SecurityInsightsVersion100YamlSchemaSecurityContactsItemValue,
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaSecurityContactsItem {
    fn from(value: &Self) -> Self {
        value.clone()
    }
}
impl SecurityInsightsVersion100YamlSchemaSecurityContactsItem {
    #[must_use] pub fn builder() -> builder::SecurityInsightsVersion100YamlSchemaSecurityContactsItem {
        builder::SecurityInsightsVersion100YamlSchemaSecurityContactsItem::default()
    }
}
///Type of contact: `email`, `phone`, or `url`.
#[derive(
    Clone,
    Copy,
    Debug,
    Deserialize,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
    Serialize,
    schemars::JsonSchema
)]
pub enum SecurityInsightsVersion100YamlSchemaSecurityContactsItemType {
    #[serde(rename = "email")]
    Email,
    #[serde(rename = "phone")]
    Phone,
    #[serde(rename = "url")]
    Url,
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaSecurityContactsItemType {
    fn from(
        value: &Self,
    ) -> Self {
        value.clone()
    }
}
impl ToString for SecurityInsightsVersion100YamlSchemaSecurityContactsItemType {
    fn to_string(&self) -> String {
        match *self {
            Self::Email => "email".to_string(),
            Self::Phone => "phone".to_string(),
            Self::Url => "url".to_string(),
        }
    }
}
impl std::str::FromStr for SecurityInsightsVersion100YamlSchemaSecurityContactsItemType {
    type Err = &'static str;
    fn from_str(value: &str) -> Result<Self, &'static str> {
        match value {
            "email" => Ok(Self::Email),
            "phone" => Ok(Self::Phone),
            "url" => Ok(Self::Url),
            _ => Err("invalid value"),
        }
    }
}
impl std::convert::TryFrom<&str>
for SecurityInsightsVersion100YamlSchemaSecurityContactsItemType {
    type Error = &'static str;
    fn try_from(value: &str) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
for SecurityInsightsVersion100YamlSchemaSecurityContactsItemType {
    type Error = &'static str;
    fn try_from(value: &String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
for SecurityInsightsVersion100YamlSchemaSecurityContactsItemType {
    type Error = &'static str;
    fn try_from(value: String) -> Result<Self, &'static str> {
        value.parse()
    }
}
///Security contact.
#[derive(
    Clone,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
    Serialize,
    schemars::JsonSchema,
    ToSchema
)]
pub struct SecurityInsightsVersion100YamlSchemaSecurityContactsItemValue(String);
impl std::ops::Deref for SecurityInsightsVersion100YamlSchemaSecurityContactsItemValue {
    type Target = String;
    fn deref(&self) -> &String {
        &self.0
    }
}
impl From<SecurityInsightsVersion100YamlSchemaSecurityContactsItemValue> for String {
    fn from(
        value: SecurityInsightsVersion100YamlSchemaSecurityContactsItemValue,
    ) -> Self {
        value.0
    }
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaSecurityContactsItemValue {
    fn from(
        value: &Self,
    ) -> Self {
        value.clone()
    }
}
impl std::str::FromStr
for SecurityInsightsVersion100YamlSchemaSecurityContactsItemValue {
    type Err = &'static str;
    fn from_str(value: &str) -> Result<Self, &'static str> {
        if regress::Regex::new(
                "^[\\w+_.-]+@[\\w.-]+$|https?:\\/\\/|[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\./0-9]*$",
            )
            .unwrap()
            .find(value)
            .is_none()
        {
            return Err(
                "doesn't match pattern \"^[\\w+_.-]+@[\\w.-]+$|https?:\\/\\/|[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\./0-9]*$\"",
            );
        }
        Ok(Self(value.to_string()))
    }
}
impl std::convert::TryFrom<&str>
for SecurityInsightsVersion100YamlSchemaSecurityContactsItemValue {
    type Error = &'static str;
    fn try_from(value: &str) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
for SecurityInsightsVersion100YamlSchemaSecurityContactsItemValue {
    type Error = &'static str;
    fn try_from(value: &String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
for SecurityInsightsVersion100YamlSchemaSecurityContactsItemValue {
    type Error = &'static str;
    fn try_from(value: String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl<'de> serde::Deserialize<'de>
for SecurityInsightsVersion100YamlSchemaSecurityContactsItemValue {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        String::deserialize(deserializer)?
            .parse()
            .map_err(|e: &'static str| {
                <D::Error as serde::de::Error>::custom(e.to_string())
            })
    }
}
#[derive(Clone, Debug, Deserialize, Serialize, schemars::JsonSchema, ToSchema)]
#[serde(deny_unknown_fields)]
pub struct SecurityInsightsVersion100YamlSchemaSecurityTestingItem {
    ///Additional comment to describe the used tool, giving more context. Maximum length 560 chars.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<SecurityInsightsVersion100YamlSchemaSecurityTestingItemComment>,
    pub integration: SecurityInsightsVersion100YamlSchemaSecurityTestingItemIntegration,
    ///Name of the tool used to scan or analyze the project.
    #[serde(rename = "tool-name")]
    pub tool_name: String,
    #[serde(rename = "tool-rulesets", default, skip_serializing_if = "Option::is_none")]
    pub tool_rulesets: Option<Vec<String>>,
    ///Type of security test: `sast`, `dast`, `iast`, `fuzzer` or `sca`.
    #[serde(rename = "tool-type")]
    pub tool_type: SecurityInsightsVersion100YamlSchemaSecurityTestingItemToolType,
    ///Link to the security test.
    #[serde(rename = "tool-url", default, skip_serializing_if = "Option::is_none")]
    pub tool_url: Option<String>,
    ///Version of the used tool.
    #[serde(rename = "tool-version")]
    pub tool_version: String,
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaSecurityTestingItem {
    fn from(value: &Self) -> Self {
        value.clone()
    }
}
impl SecurityInsightsVersion100YamlSchemaSecurityTestingItem {
    #[must_use] pub fn builder() -> builder::SecurityInsightsVersion100YamlSchemaSecurityTestingItem {
        builder::SecurityInsightsVersion100YamlSchemaSecurityTestingItem::default()
    }
}
///Additional comment to describe the used tool, giving more context. Maximum length 560 chars.
#[derive(
    Clone,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
    Serialize,
    schemars::JsonSchema,
    ToSchema
)]
pub struct SecurityInsightsVersion100YamlSchemaSecurityTestingItemComment(String);
impl std::ops::Deref for SecurityInsightsVersion100YamlSchemaSecurityTestingItemComment {
    type Target = String;
    fn deref(&self) -> &String {
        &self.0
    }
}
impl From<SecurityInsightsVersion100YamlSchemaSecurityTestingItemComment> for String {
    fn from(
        value: SecurityInsightsVersion100YamlSchemaSecurityTestingItemComment,
    ) -> Self {
        value.0
    }
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaSecurityTestingItemComment {
    fn from(
        value: &Self,
    ) -> Self {
        value.clone()
    }
}
impl std::str::FromStr
for SecurityInsightsVersion100YamlSchemaSecurityTestingItemComment {
    type Err = &'static str;
    fn from_str(value: &str) -> Result<Self, &'static str> {
        if regress::Regex::new("^(.|\\n){1,560}$").unwrap().find(value).is_none() {
            return Err("doesn't match pattern \"^(.|\\n){1,560}$\"");
        }
        Ok(Self(value.to_string()))
    }
}
impl std::convert::TryFrom<&str>
for SecurityInsightsVersion100YamlSchemaSecurityTestingItemComment {
    type Error = &'static str;
    fn try_from(value: &str) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
for SecurityInsightsVersion100YamlSchemaSecurityTestingItemComment {
    type Error = &'static str;
    fn try_from(value: &String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
for SecurityInsightsVersion100YamlSchemaSecurityTestingItemComment {
    type Error = &'static str;
    fn try_from(value: String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl<'de> serde::Deserialize<'de>
for SecurityInsightsVersion100YamlSchemaSecurityTestingItemComment {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        String::deserialize(deserializer)?
            .parse()
            .map_err(|e: &'static str| {
                <D::Error as serde::de::Error>::custom(e.to_string())
            })
    }
}
#[derive(Clone, Debug, Deserialize, Serialize, schemars::JsonSchema, ToSchema)]
#[serde(deny_unknown_fields)]
pub struct SecurityInsightsVersion100YamlSchemaSecurityTestingItemIntegration {
    ///Define if the test is an ad-hoc security test.
    #[serde(rename = "ad-hoc")]
    pub ad_hoc: bool,
    ///Define if the security test runs before the release.
    #[serde(rename = "before-release")]
    pub before_release: bool,
    ///Define if the security test is part of the CI.
    pub ci: bool,
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaSecurityTestingItemIntegration {
    fn from(
        value: &Self,
    ) -> Self {
        value.clone()
    }
}
impl SecurityInsightsVersion100YamlSchemaSecurityTestingItemIntegration {
    #[must_use] pub fn builder() -> builder::SecurityInsightsVersion100YamlSchemaSecurityTestingItemIntegration {
        builder::SecurityInsightsVersion100YamlSchemaSecurityTestingItemIntegration::default()
    }
}
///Type of security test: `sast`, `dast`, `iast`, `fuzzer` or `sca`.
#[derive(
    Clone,
    Copy,
    Debug,
    Deserialize,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
    Serialize,
    schemars::JsonSchema
)]
pub enum SecurityInsightsVersion100YamlSchemaSecurityTestingItemToolType {
    #[serde(rename = "sast")]
    Sast,
    #[serde(rename = "dast")]
    Dast,
    #[serde(rename = "iast")]
    Iast,
    #[serde(rename = "fuzzer")]
    Fuzzer,
    #[serde(rename = "sca")]
    Sca,
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaSecurityTestingItemToolType {
    fn from(
        value: &Self,
    ) -> Self {
        value.clone()
    }
}
impl ToString for SecurityInsightsVersion100YamlSchemaSecurityTestingItemToolType {
    fn to_string(&self) -> String {
        match *self {
            Self::Sast => "sast".to_string(),
            Self::Dast => "dast".to_string(),
            Self::Iast => "iast".to_string(),
            Self::Fuzzer => "fuzzer".to_string(),
            Self::Sca => "sca".to_string(),
        }
    }
}
impl std::str::FromStr
for SecurityInsightsVersion100YamlSchemaSecurityTestingItemToolType {
    type Err = &'static str;
    fn from_str(value: &str) -> Result<Self, &'static str> {
        match value {
            "sast" => Ok(Self::Sast),
            "dast" => Ok(Self::Dast),
            "iast" => Ok(Self::Iast),
            "fuzzer" => Ok(Self::Fuzzer),
            "sca" => Ok(Self::Sca),
            _ => Err("invalid value"),
        }
    }
}
impl std::convert::TryFrom<&str>
for SecurityInsightsVersion100YamlSchemaSecurityTestingItemToolType {
    type Error = &'static str;
    fn try_from(value: &str) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
for SecurityInsightsVersion100YamlSchemaSecurityTestingItemToolType {
    type Error = &'static str;
    fn try_from(value: &String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
for SecurityInsightsVersion100YamlSchemaSecurityTestingItemToolType {
    type Error = &'static str;
    fn try_from(value: String) -> Result<Self, &'static str> {
        value.parse()
    }
}
#[derive(Clone, Debug, Deserialize, Serialize, schemars::JsonSchema, ToSchema)]
#[serde(deny_unknown_fields)]
pub struct SecurityInsightsVersion100YamlSchemaVulnerabilityReporting {
    ///Define if the maintainers or security team accept security reports or not.
    #[serde(rename = "accepts-vulnerability-reports")]
    pub accepts_vulnerability_reports: bool,
    ///Define if a bug bounty program is in-place or not.
    #[serde(
        rename = "bug-bounty-available",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub bug_bounty_available: Option<bool>,
    ///Link to the bug bounty program.
    #[serde(rename = "bug-bounty-url", default, skip_serializing_if = "Option::is_none")]
    pub bug_bounty_url: Option<String>,
    ///Additional comment to describe the in-scope list, out-scope list, preferred contact method, or other context. Maximum length 560 chars.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<
        SecurityInsightsVersion100YamlSchemaVulnerabilityReportingComment,
    >,
    ///E-mail contact to report vulnerabilities or other related information.
    #[serde(rename = "email-contact", default, skip_serializing_if = "Option::is_none")]
    pub email_contact: Option<String>,
    ///In-scope vulnerability categories, according to OWASP Top 10 2021. It is recommended to specify a better in-scope list in the security policy.
    #[serde(rename = "in-scope", default, skip_serializing_if = "Option::is_none")]
    pub in_scope: Option<
        Vec<SecurityInsightsVersion100YamlSchemaVulnerabilityReportingInScopeItem>,
    >,
    ///Out-of-scope vulnerability categories, according to OWASP Top 10 2021. It is recommended to specify a better out-of-scope list in the security policy.
    #[serde(rename = "out-scope", default, skip_serializing_if = "Option::is_none")]
    pub out_scope: Option<
        Vec<SecurityInsightsVersion100YamlSchemaVulnerabilityReportingOutScopeItem>,
    >,
    ///PGP Public Key.
    #[serde(rename = "pgp-key", default, skip_serializing_if = "Option::is_none")]
    pub pgp_key: Option<
        SecurityInsightsVersion100YamlSchemaVulnerabilityReportingPgpKey,
    >,
    ///Link to the security policy.
    #[serde(
        rename = "security-policy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub security_policy: Option<String>,
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaVulnerabilityReporting {
    fn from(value: &Self) -> Self {
        value.clone()
    }
}
impl SecurityInsightsVersion100YamlSchemaVulnerabilityReporting {
    #[must_use] pub fn builder() -> builder::SecurityInsightsVersion100YamlSchemaVulnerabilityReporting {
        builder::SecurityInsightsVersion100YamlSchemaVulnerabilityReporting::default()
    }
}
///Additional comment to describe the in-scope list, out-scope list, preferred contact method, or other context. Maximum length 560 chars.
#[derive(
    Clone,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
    Serialize,
    schemars::JsonSchema,
    ToSchema
)]
pub struct SecurityInsightsVersion100YamlSchemaVulnerabilityReportingComment(String);
impl std::ops::Deref
for SecurityInsightsVersion100YamlSchemaVulnerabilityReportingComment {
    type Target = String;
    fn deref(&self) -> &String {
        &self.0
    }
}
impl From<SecurityInsightsVersion100YamlSchemaVulnerabilityReportingComment> for String {
    fn from(
        value: SecurityInsightsVersion100YamlSchemaVulnerabilityReportingComment,
    ) -> Self {
        value.0
    }
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaVulnerabilityReportingComment {
    fn from(
        value: &Self,
    ) -> Self {
        value.clone()
    }
}
impl std::str::FromStr
for SecurityInsightsVersion100YamlSchemaVulnerabilityReportingComment {
    type Err = &'static str;
    fn from_str(value: &str) -> Result<Self, &'static str> {
        if regress::Regex::new("^(.|\\n){1,560}$").unwrap().find(value).is_none() {
            return Err("doesn't match pattern \"^(.|\\n){1,560}$\"");
        }
        Ok(Self(value.to_string()))
    }
}
impl std::convert::TryFrom<&str>
for SecurityInsightsVersion100YamlSchemaVulnerabilityReportingComment {
    type Error = &'static str;
    fn try_from(value: &str) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
for SecurityInsightsVersion100YamlSchemaVulnerabilityReportingComment {
    type Error = &'static str;
    fn try_from(value: &String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
for SecurityInsightsVersion100YamlSchemaVulnerabilityReportingComment {
    type Error = &'static str;
    fn try_from(value: String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl<'de> serde::Deserialize<'de>
for SecurityInsightsVersion100YamlSchemaVulnerabilityReportingComment {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        String::deserialize(deserializer)?
            .parse()
            .map_err(|e: &'static str| {
                <D::Error as serde::de::Error>::custom(e.to_string())
            })
    }
}
#[derive(
    Clone,
    Copy,
    Debug,
    Deserialize,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
    Serialize,
    schemars::JsonSchema
)]
pub enum SecurityInsightsVersion100YamlSchemaVulnerabilityReportingInScopeItem {
    #[serde(rename = "broken access control")]
    BrokenAccessControl,
    #[serde(rename = "cryptographic failures")]
    CryptographicFailures,
    #[serde(rename = "injection")]
    Injection,
    #[serde(rename = "insecure design")]
    InsecureDesign,
    #[serde(rename = "security misconfiguration")]
    SecurityMisconfiguration,
    #[serde(rename = "vulnerable and outdated components")]
    VulnerableAndOutdatedComponents,
    #[serde(rename = "identification and authentication failures")]
    IdentificationAndAuthenticationFailures,
    #[serde(rename = "software and data integrity failures")]
    SoftwareAndDataIntegrityFailures,
    #[serde(rename = "security logging and monitoring failures")]
    SecurityLoggingAndMonitoringFailures,
    #[serde(rename = "ssrf")]
    Ssrf,
    #[serde(rename = "other")]
    Other,
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaVulnerabilityReportingInScopeItem {
    fn from(
        value: &Self,
    ) -> Self {
        value.clone()
    }
}
impl ToString for SecurityInsightsVersion100YamlSchemaVulnerabilityReportingInScopeItem {
    fn to_string(&self) -> String {
        match *self {
            Self::BrokenAccessControl => "broken access control".to_string(),
            Self::CryptographicFailures => "cryptographic failures".to_string(),
            Self::Injection => "injection".to_string(),
            Self::InsecureDesign => "insecure design".to_string(),
            Self::SecurityMisconfiguration => "security misconfiguration".to_string(),
            Self::VulnerableAndOutdatedComponents => {
                "vulnerable and outdated components".to_string()
            }
            Self::IdentificationAndAuthenticationFailures => {
                "identification and authentication failures".to_string()
            }
            Self::SoftwareAndDataIntegrityFailures => {
                "software and data integrity failures".to_string()
            }
            Self::SecurityLoggingAndMonitoringFailures => {
                "security logging and monitoring failures".to_string()
            }
            Self::Ssrf => "ssrf".to_string(),
            Self::Other => "other".to_string(),
        }
    }
}
impl std::str::FromStr
for SecurityInsightsVersion100YamlSchemaVulnerabilityReportingInScopeItem {
    type Err = &'static str;
    fn from_str(value: &str) -> Result<Self, &'static str> {
        match value {
            "broken access control" => Ok(Self::BrokenAccessControl),
            "cryptographic failures" => Ok(Self::CryptographicFailures),
            "injection" => Ok(Self::Injection),
            "insecure design" => Ok(Self::InsecureDesign),
            "security misconfiguration" => Ok(Self::SecurityMisconfiguration),
            "vulnerable and outdated components" => {
                Ok(Self::VulnerableAndOutdatedComponents)
            }
            "identification and authentication failures" => {
                Ok(Self::IdentificationAndAuthenticationFailures)
            }
            "software and data integrity failures" => {
                Ok(Self::SoftwareAndDataIntegrityFailures)
            }
            "security logging and monitoring failures" => {
                Ok(Self::SecurityLoggingAndMonitoringFailures)
            }
            "ssrf" => Ok(Self::Ssrf),
            "other" => Ok(Self::Other),
            _ => Err("invalid value"),
        }
    }
}
impl std::convert::TryFrom<&str>
for SecurityInsightsVersion100YamlSchemaVulnerabilityReportingInScopeItem {
    type Error = &'static str;
    fn try_from(value: &str) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
for SecurityInsightsVersion100YamlSchemaVulnerabilityReportingInScopeItem {
    type Error = &'static str;
    fn try_from(value: &String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
for SecurityInsightsVersion100YamlSchemaVulnerabilityReportingInScopeItem {
    type Error = &'static str;
    fn try_from(value: String) -> Result<Self, &'static str> {
        value.parse()
    }
}
#[derive(
    Clone,
    Copy,
    Debug,
    Deserialize,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
    Serialize,
    schemars::JsonSchema
)]
pub enum SecurityInsightsVersion100YamlSchemaVulnerabilityReportingOutScopeItem {
    #[serde(rename = "broken access control")]
    BrokenAccessControl,
    #[serde(rename = "cryptographic failures")]
    CryptographicFailures,
    #[serde(rename = "injection")]
    Injection,
    #[serde(rename = "insecure design")]
    InsecureDesign,
    #[serde(rename = "security misconfiguration")]
    SecurityMisconfiguration,
    #[serde(rename = "vulnerable and outdated components")]
    VulnerableAndOutdatedComponents,
    #[serde(rename = "identification and authentication failures")]
    IdentificationAndAuthenticationFailures,
    #[serde(rename = "software and data integrity failures")]
    SoftwareAndDataIntegrityFailures,
    #[serde(rename = "security logging and monitoring failures")]
    SecurityLoggingAndMonitoringFailures,
    #[serde(rename = "ssrf")]
    Ssrf,
    #[serde(rename = "other")]
    Other,
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaVulnerabilityReportingOutScopeItem {
    fn from(
        value: &Self,
    ) -> Self {
        value.clone()
    }
}
impl ToString
for SecurityInsightsVersion100YamlSchemaVulnerabilityReportingOutScopeItem {
    fn to_string(&self) -> String {
        match *self {
            Self::BrokenAccessControl => "broken access control".to_string(),
            Self::CryptographicFailures => "cryptographic failures".to_string(),
            Self::Injection => "injection".to_string(),
            Self::InsecureDesign => "insecure design".to_string(),
            Self::SecurityMisconfiguration => "security misconfiguration".to_string(),
            Self::VulnerableAndOutdatedComponents => {
                "vulnerable and outdated components".to_string()
            }
            Self::IdentificationAndAuthenticationFailures => {
                "identification and authentication failures".to_string()
            }
            Self::SoftwareAndDataIntegrityFailures => {
                "software and data integrity failures".to_string()
            }
            Self::SecurityLoggingAndMonitoringFailures => {
                "security logging and monitoring failures".to_string()
            }
            Self::Ssrf => "ssrf".to_string(),
            Self::Other => "other".to_string(),
        }
    }
}
impl std::str::FromStr
for SecurityInsightsVersion100YamlSchemaVulnerabilityReportingOutScopeItem {
    type Err = &'static str;
    fn from_str(value: &str) -> Result<Self, &'static str> {
        match value {
            "broken access control" => Ok(Self::BrokenAccessControl),
            "cryptographic failures" => Ok(Self::CryptographicFailures),
            "injection" => Ok(Self::Injection),
            "insecure design" => Ok(Self::InsecureDesign),
            "security misconfiguration" => Ok(Self::SecurityMisconfiguration),
            "vulnerable and outdated components" => {
                Ok(Self::VulnerableAndOutdatedComponents)
            }
            "identification and authentication failures" => {
                Ok(Self::IdentificationAndAuthenticationFailures)
            }
            "software and data integrity failures" => {
                Ok(Self::SoftwareAndDataIntegrityFailures)
            }
            "security logging and monitoring failures" => {
                Ok(Self::SecurityLoggingAndMonitoringFailures)
            }
            "ssrf" => Ok(Self::Ssrf),
            "other" => Ok(Self::Other),
            _ => Err("invalid value"),
        }
    }
}
impl std::convert::TryFrom<&str>
for SecurityInsightsVersion100YamlSchemaVulnerabilityReportingOutScopeItem {
    type Error = &'static str;
    fn try_from(value: &str) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
for SecurityInsightsVersion100YamlSchemaVulnerabilityReportingOutScopeItem {
    type Error = &'static str;
    fn try_from(value: &String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
for SecurityInsightsVersion100YamlSchemaVulnerabilityReportingOutScopeItem {
    type Error = &'static str;
    fn try_from(value: String) -> Result<Self, &'static str> {
        value.parse()
    }
}
///PGP Public Key.
#[derive(
    Clone,
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
    Serialize,
    schemars::JsonSchema,
    ToSchema
)]
pub struct SecurityInsightsVersion100YamlSchemaVulnerabilityReportingPgpKey(String);
impl std::ops::Deref
for SecurityInsightsVersion100YamlSchemaVulnerabilityReportingPgpKey {
    type Target = String;
    fn deref(&self) -> &String {
        &self.0
    }
}
impl From<SecurityInsightsVersion100YamlSchemaVulnerabilityReportingPgpKey> for String {
    fn from(
        value: SecurityInsightsVersion100YamlSchemaVulnerabilityReportingPgpKey,
    ) -> Self {
        value.0
    }
}
impl From<&Self>
for SecurityInsightsVersion100YamlSchemaVulnerabilityReportingPgpKey {
    fn from(
        value: &Self,
    ) -> Self {
        value.clone()
    }
}
impl std::str::FromStr
for SecurityInsightsVersion100YamlSchemaVulnerabilityReportingPgpKey {
    type Err = &'static str;
    fn from_str(value: &str) -> Result<Self, &'static str> {
        if regress::Regex::new(
                "^(-----BEGIN PGP PUBLIC KEY BLOCK-----).*([a-zA-Z0-9//\\n\\/\\.\\:\\+\\ \\=]+).*(-----END PGP PUBLIC KEY BLOCK-----)$",
            )
            .unwrap()
            .find(value)
            .is_none()
        {
            return Err(
                "doesn't match pattern \"^(-----BEGIN PGP PUBLIC KEY BLOCK-----).*([a-zA-Z0-9//\\n\\/\\.\\:\\+\\ \\=]+).*(-----END PGP PUBLIC KEY BLOCK-----)$\"",
            );
        }
        Ok(Self(value.to_string()))
    }
}
impl std::convert::TryFrom<&str>
for SecurityInsightsVersion100YamlSchemaVulnerabilityReportingPgpKey {
    type Error = &'static str;
    fn try_from(value: &str) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<&String>
for SecurityInsightsVersion100YamlSchemaVulnerabilityReportingPgpKey {
    type Error = &'static str;
    fn try_from(value: &String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl std::convert::TryFrom<String>
for SecurityInsightsVersion100YamlSchemaVulnerabilityReportingPgpKey {
    type Error = &'static str;
    fn try_from(value: String) -> Result<Self, &'static str> {
        value.parse()
    }
}
impl<'de> serde::Deserialize<'de>
for SecurityInsightsVersion100YamlSchemaVulnerabilityReportingPgpKey {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        String::deserialize(deserializer)?
            .parse()
            .map_err(|e: &'static str| {
                <D::Error as serde::de::Error>::custom(e.to_string())
            })
    }
}
pub mod builder {
    #[derive(Clone, Debug)]
    pub struct SecurityInsightsVersion100YamlSchema {
        contribution_policy: Result<
            super::SecurityInsightsVersion100YamlSchemaContributionPolicy,
            String,
        >,
        dependencies: Result<
            Option<super::SecurityInsightsVersion100YamlSchemaDependencies>,
            String,
        >,
        distribution_points: Result<Vec<String>, String>,
        documentation: Result<Option<Vec<String>>, String>,
        header: Result<super::SecurityInsightsVersion100YamlSchemaHeader, String>,
        project_lifecycle: Result<
            super::SecurityInsightsVersion100YamlSchemaProjectLifecycle,
            String,
        >,
        security_artifacts: Result<
            Option<super::SecurityInsightsVersion100YamlSchemaSecurityArtifacts>,
            String,
        >,
        security_assessments: Result<
            Option<
                Vec<super::SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItem>,
            >,
            String,
        >,
        security_contacts: Result<
            Vec<super::SecurityInsightsVersion100YamlSchemaSecurityContactsItem>,
            String,
        >,
        security_testing: Result<
            Vec<super::SecurityInsightsVersion100YamlSchemaSecurityTestingItem>,
            String,
        >,
        vulnerability_reporting: Result<
            super::SecurityInsightsVersion100YamlSchemaVulnerabilityReporting,
            String,
        >,
    }
    impl Default for SecurityInsightsVersion100YamlSchema {
        fn default() -> Self {
            Self {
                contribution_policy: Err(
                    "no value supplied for contribution_policy".to_string(),
                ),
                dependencies: Ok(Default::default()),
                distribution_points: Err(
                    "no value supplied for distribution_points".to_string(),
                ),
                documentation: Ok(Default::default()),
                header: Err("no value supplied for header".to_string()),
                project_lifecycle: Err(
                    "no value supplied for project_lifecycle".to_string(),
                ),
                security_artifacts: Ok(Default::default()),
                security_assessments: Ok(Default::default()),
                security_contacts: Err(
                    "no value supplied for security_contacts".to_string(),
                ),
                security_testing: Ok(Default::default()),
                vulnerability_reporting: Err(
                    "no value supplied for vulnerability_reporting".to_string(),
                ),
            }
        }
    }
    impl SecurityInsightsVersion100YamlSchema {
        pub fn contribution_policy<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                super::SecurityInsightsVersion100YamlSchemaContributionPolicy,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .contribution_policy = value
                .try_into()
                .map_err(|e| {
                    format!(
                        "error converting supplied value for contribution_policy: {e}"
                    )
                });
            self
        }
        pub fn dependencies<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                Option<super::SecurityInsightsVersion100YamlSchemaDependencies>,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .dependencies = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for dependencies: {e}")
                });
            self
        }
        pub fn distribution_points<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Vec<String>>,
            T::Error: std::fmt::Display,
        {
            self
                .distribution_points = value
                .try_into()
                .map_err(|e| {
                    format!(
                        "error converting supplied value for distribution_points: {e}"
                    )
                });
            self
        }
        pub fn documentation<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Option<Vec<String>>>,
            T::Error: std::fmt::Display,
        {
            self
                .documentation = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for documentation: {e}")
                });
            self
        }
        pub fn header<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<super::SecurityInsightsVersion100YamlSchemaHeader>,
            T::Error: std::fmt::Display,
        {
            self
                .header = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for header: {e}")
                });
            self
        }
        pub fn project_lifecycle<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                super::SecurityInsightsVersion100YamlSchemaProjectLifecycle,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .project_lifecycle = value
                .try_into()
                .map_err(|e| {
                    format!(
                        "error converting supplied value for project_lifecycle: {e}"
                    )
                });
            self
        }
        pub fn security_artifacts<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                Option<super::SecurityInsightsVersion100YamlSchemaSecurityArtifacts>,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .security_artifacts = value
                .try_into()
                .map_err(|e| {
                    format!(
                        "error converting supplied value for security_artifacts: {e}"
                    )
                });
            self
        }
        pub fn security_assessments<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                Option<
                    Vec<
                        super::SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItem,
                    >,
                >,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .security_assessments = value
                .try_into()
                .map_err(|e| {
                    format!(
                        "error converting supplied value for security_assessments: {e}"
                    )
                });
            self
        }
        pub fn security_contacts<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                Vec<super::SecurityInsightsVersion100YamlSchemaSecurityContactsItem>,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .security_contacts = value
                .try_into()
                .map_err(|e| {
                    format!(
                        "error converting supplied value for security_contacts: {e}"
                    )
                });
            self
        }
        pub fn security_testing<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                Vec<super::SecurityInsightsVersion100YamlSchemaSecurityTestingItem>,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .security_testing = value
                .try_into()
                .map_err(|e| {
                    format!(
                        "error converting supplied value for security_testing: {e}"
                    )
                });
            self
        }
        pub fn vulnerability_reporting<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                super::SecurityInsightsVersion100YamlSchemaVulnerabilityReporting,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .vulnerability_reporting = value
                .try_into()
                .map_err(|e| {
                    format!(
                        "error converting supplied value for vulnerability_reporting: {e}"
                    )
                });
            self
        }
    }
    impl std::convert::TryFrom<SecurityInsightsVersion100YamlSchema>
    for super::SecurityInsightsVersion100YamlSchema {
        type Error = String;
        fn try_from(
            value: SecurityInsightsVersion100YamlSchema,
        ) -> Result<Self, String> {
            Ok(Self {
                contribution_policy: value.contribution_policy?,
                dependencies: value.dependencies?,
                distribution_points: value.distribution_points?,
                documentation: value.documentation?,
                header: value.header?,
                project_lifecycle: value.project_lifecycle?,
                security_artifacts: value.security_artifacts?,
                security_assessments: value.security_assessments?,
                security_contacts: value.security_contacts?,
                security_testing: value.security_testing?,
                vulnerability_reporting: value.vulnerability_reporting?,
            })
        }
    }
    impl From<super::SecurityInsightsVersion100YamlSchema>
    for SecurityInsightsVersion100YamlSchema {
        fn from(value: super::SecurityInsightsVersion100YamlSchema) -> Self {
            Self {
                contribution_policy: Ok(value.contribution_policy),
                dependencies: Ok(value.dependencies),
                distribution_points: Ok(value.distribution_points),
                documentation: Ok(value.documentation),
                header: Ok(value.header),
                project_lifecycle: Ok(value.project_lifecycle),
                security_artifacts: Ok(value.security_artifacts),
                security_assessments: Ok(value.security_assessments),
                security_contacts: Ok(value.security_contacts),
                security_testing: Ok(value.security_testing),
                vulnerability_reporting: Ok(value.vulnerability_reporting),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct SecurityInsightsVersion100YamlSchemaContributionPolicy {
        accepts_automated_pull_requests: Result<bool, String>,
        accepts_pull_requests: Result<bool, String>,
        automated_tools_list: Result<
            Option<
                Vec<
                    super::SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItem,
                >,
            >,
            String,
        >,
        code_of_conduct: Result<Option<String>, String>,
        contributing_policy: Result<Option<String>, String>,
    }
    impl Default for SecurityInsightsVersion100YamlSchemaContributionPolicy {
        fn default() -> Self {
            Self {
                accepts_automated_pull_requests: Err(
                    "no value supplied for accepts_automated_pull_requests".to_string(),
                ),
                accepts_pull_requests: Err(
                    "no value supplied for accepts_pull_requests".to_string(),
                ),
                automated_tools_list: Ok(Default::default()),
                code_of_conduct: Ok(Default::default()),
                contributing_policy: Ok(Default::default()),
            }
        }
    }
    impl SecurityInsightsVersion100YamlSchemaContributionPolicy {
        pub fn accepts_automated_pull_requests<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<bool>,
            T::Error: std::fmt::Display,
        {
            self
                .accepts_automated_pull_requests = value
                .try_into()
                .map_err(|e| {
                    format!(
                        "error converting supplied value for accepts_automated_pull_requests: {e}"
                    )
                });
            self
        }
        pub fn accepts_pull_requests<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<bool>,
            T::Error: std::fmt::Display,
        {
            self
                .accepts_pull_requests = value
                .try_into()
                .map_err(|e| {
                    format!(
                        "error converting supplied value for accepts_pull_requests: {e}"
                    )
                });
            self
        }
        pub fn automated_tools_list<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                Option<
                    Vec<
                        super::SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItem,
                    >,
                >,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .automated_tools_list = value
                .try_into()
                .map_err(|e| {
                    format!(
                        "error converting supplied value for automated_tools_list: {e}"
                    )
                });
            self
        }
        pub fn code_of_conduct<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Option<String>>,
            T::Error: std::fmt::Display,
        {
            self
                .code_of_conduct = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for code_of_conduct: {e}")
                });
            self
        }
        pub fn contributing_policy<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Option<String>>,
            T::Error: std::fmt::Display,
        {
            self
                .contributing_policy = value
                .try_into()
                .map_err(|e| {
                    format!(
                        "error converting supplied value for contributing_policy: {e}"
                    )
                });
            self
        }
    }
    impl std::convert::TryFrom<SecurityInsightsVersion100YamlSchemaContributionPolicy>
    for super::SecurityInsightsVersion100YamlSchemaContributionPolicy {
        type Error = String;
        fn try_from(
            value: SecurityInsightsVersion100YamlSchemaContributionPolicy,
        ) -> Result<Self, String> {
            Ok(Self {
                accepts_automated_pull_requests: value.accepts_automated_pull_requests?,
                accepts_pull_requests: value.accepts_pull_requests?,
                automated_tools_list: value.automated_tools_list?,
                code_of_conduct: value.code_of_conduct?,
                contributing_policy: value.contributing_policy?,
            })
        }
    }
    impl From<super::SecurityInsightsVersion100YamlSchemaContributionPolicy>
    for SecurityInsightsVersion100YamlSchemaContributionPolicy {
        fn from(
            value: super::SecurityInsightsVersion100YamlSchemaContributionPolicy,
        ) -> Self {
            Self {
                accepts_automated_pull_requests: Ok(
                    value.accepts_automated_pull_requests,
                ),
                accepts_pull_requests: Ok(value.accepts_pull_requests),
                automated_tools_list: Ok(value.automated_tools_list),
                code_of_conduct: Ok(value.code_of_conduct),
                contributing_policy: Ok(value.contributing_policy),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItem {
        action: Result<
            super::SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItemAction,
            String,
        >,
        automated_tool: Result<String, String>,
        comment: Result<
            Option<
                super::SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItemComment,
            >,
            String,
        >,
        path: Result<Option<Vec<String>>, String>,
    }
    impl Default
    for SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItem {
        fn default() -> Self {
            Self {
                action: Err("no value supplied for action".to_string()),
                automated_tool: Err("no value supplied for automated_tool".to_string()),
                comment: Ok(Default::default()),
                path: Ok(Default::default()),
            }
        }
    }
    impl SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItem {
        pub fn action<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                super::SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItemAction,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .action = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for action: {e}")
                });
            self
        }
        pub fn automated_tool<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<String>,
            T::Error: std::fmt::Display,
        {
            self
                .automated_tool = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for automated_tool: {e}")
                });
            self
        }
        pub fn comment<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                Option<
                    super::SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItemComment,
                >,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .comment = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for comment: {e}")
                });
            self
        }
        pub fn path<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Option<Vec<String>>>,
            T::Error: std::fmt::Display,
        {
            self
                .path = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for path: {e}"));
            self
        }
    }
    impl std::convert::TryFrom<
        SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItem,
    >
    for super::SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItem {
        type Error = String;
        fn try_from(
            value: SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItem,
        ) -> Result<Self, String> {
            Ok(Self {
                action: value.action?,
                automated_tool: value.automated_tool?,
                comment: value.comment?,
                path: value.path?,
            })
        }
    }
    impl From<
        super::SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItem,
    > for SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItem {
        fn from(
            value: super::SecurityInsightsVersion100YamlSchemaContributionPolicyAutomatedToolsListItem,
        ) -> Self {
            Self {
                action: Ok(value.action),
                automated_tool: Ok(value.automated_tool),
                comment: Ok(value.comment),
                path: Ok(value.path),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct SecurityInsightsVersion100YamlSchemaDependencies {
        dependencies_lifecycle: Result<
            Option<
                super::SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycle,
            >,
            String,
        >,
        dependencies_lists: Result<Vec<String>, String>,
        env_dependencies_policy: Result<
            Option<
                super::SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicy,
            >,
            String,
        >,
        sbom: Result<
            Option<Vec<super::SecurityInsightsVersion100YamlSchemaDependenciesSbomItem>>,
            String,
        >,
        third_party_packages: Result<Option<bool>, String>,
    }
    impl Default for SecurityInsightsVersion100YamlSchemaDependencies {
        fn default() -> Self {
            Self {
                dependencies_lifecycle: Ok(Default::default()),
                dependencies_lists: Ok(Default::default()),
                env_dependencies_policy: Ok(Default::default()),
                sbom: Ok(Default::default()),
                third_party_packages: Ok(Default::default()),
            }
        }
    }
    impl SecurityInsightsVersion100YamlSchemaDependencies {
        pub fn dependencies_lifecycle<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                Option<
                    super::SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycle,
                >,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .dependencies_lifecycle = value
                .try_into()
                .map_err(|e| {
                    format!(
                        "error converting supplied value for dependencies_lifecycle: {e}"
                    )
                });
            self
        }
        pub fn dependencies_lists<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Vec<String>>,
            T::Error: std::fmt::Display,
        {
            self
                .dependencies_lists = value
                .try_into()
                .map_err(|e| {
                    format!(
                        "error converting supplied value for dependencies_lists: {e}"
                    )
                });
            self
        }
        pub fn env_dependencies_policy<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                Option<
                    super::SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicy,
                >,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .env_dependencies_policy = value
                .try_into()
                .map_err(|e| {
                    format!(
                        "error converting supplied value for env_dependencies_policy: {e}"
                    )
                });
            self
        }
        pub fn sbom<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                Option<
                    Vec<super::SecurityInsightsVersion100YamlSchemaDependenciesSbomItem>,
                >,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .sbom = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for sbom: {e}"));
            self
        }
        pub fn third_party_packages<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Option<bool>>,
            T::Error: std::fmt::Display,
        {
            self
                .third_party_packages = value
                .try_into()
                .map_err(|e| {
                    format!(
                        "error converting supplied value for third_party_packages: {e}"
                    )
                });
            self
        }
    }
    impl std::convert::TryFrom<SecurityInsightsVersion100YamlSchemaDependencies>
    for super::SecurityInsightsVersion100YamlSchemaDependencies {
        type Error = String;
        fn try_from(
            value: SecurityInsightsVersion100YamlSchemaDependencies,
        ) -> Result<Self, String> {
            Ok(Self {
                dependencies_lifecycle: value.dependencies_lifecycle?,
                dependencies_lists: value.dependencies_lists?,
                env_dependencies_policy: value.env_dependencies_policy?,
                sbom: value.sbom?,
                third_party_packages: value.third_party_packages?,
            })
        }
    }
    impl From<super::SecurityInsightsVersion100YamlSchemaDependencies>
    for SecurityInsightsVersion100YamlSchemaDependencies {
        fn from(value: super::SecurityInsightsVersion100YamlSchemaDependencies) -> Self {
            Self {
                dependencies_lifecycle: Ok(value.dependencies_lifecycle),
                dependencies_lists: Ok(value.dependencies_lists),
                env_dependencies_policy: Ok(value.env_dependencies_policy),
                sbom: Ok(value.sbom),
                third_party_packages: Ok(value.third_party_packages),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycle {
        comment: Result<
            Option<
                super::SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycleComment,
            >,
            String,
        >,
        policy_url: Result<Option<String>, String>,
    }
    impl Default
    for SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycle {
        fn default() -> Self {
            Self {
                comment: Ok(Default::default()),
                policy_url: Ok(Default::default()),
            }
        }
    }
    impl SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycle {
        pub fn comment<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                Option<
                    super::SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycleComment,
                >,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .comment = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for comment: {e}")
                });
            self
        }
        pub fn policy_url<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Option<String>>,
            T::Error: std::fmt::Display,
        {
            self
                .policy_url = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for policy_url: {e}")
                });
            self
        }
    }
    impl std::convert::TryFrom<
        SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycle,
    > for super::SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycle {
        type Error = String;
        fn try_from(
            value: SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycle,
        ) -> Result<Self, String> {
            Ok(Self {
                comment: value.comment?,
                policy_url: value.policy_url?,
            })
        }
    }
    impl From<
        super::SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycle,
    > for SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycle {
        fn from(
            value: super::SecurityInsightsVersion100YamlSchemaDependenciesDependenciesLifecycle,
        ) -> Self {
            Self {
                comment: Ok(value.comment),
                policy_url: Ok(value.policy_url),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicy {
        comment: Result<
            Option<
                super::SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicyComment,
            >,
            String,
        >,
        policy_url: Result<Option<String>, String>,
    }
    impl Default
    for SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicy {
        fn default() -> Self {
            Self {
                comment: Ok(Default::default()),
                policy_url: Ok(Default::default()),
            }
        }
    }
    impl SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicy {
        pub fn comment<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                Option<
                    super::SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicyComment,
                >,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .comment = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for comment: {e}")
                });
            self
        }
        pub fn policy_url<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Option<String>>,
            T::Error: std::fmt::Display,
        {
            self
                .policy_url = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for policy_url: {e}")
                });
            self
        }
    }
    impl std::convert::TryFrom<
        SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicy,
    > for super::SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicy {
        type Error = String;
        fn try_from(
            value: SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicy,
        ) -> Result<Self, String> {
            Ok(Self {
                comment: value.comment?,
                policy_url: value.policy_url?,
            })
        }
    }
    impl From<
        super::SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicy,
    > for SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicy {
        fn from(
            value: super::SecurityInsightsVersion100YamlSchemaDependenciesEnvDependenciesPolicy,
        ) -> Self {
            Self {
                comment: Ok(value.comment),
                policy_url: Ok(value.policy_url),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct SecurityInsightsVersion100YamlSchemaDependenciesSbomItem {
        sbom_creation: Result<
            Option<
                super::SecurityInsightsVersion100YamlSchemaDependenciesSbomItemSbomCreation,
            >,
            String,
        >,
        sbom_file: Result<Option<String>, String>,
        sbom_format: Result<Option<String>, String>,
        sbom_url: Result<Option<String>, String>,
    }
    impl Default for SecurityInsightsVersion100YamlSchemaDependenciesSbomItem {
        fn default() -> Self {
            Self {
                sbom_creation: Ok(Default::default()),
                sbom_file: Ok(Default::default()),
                sbom_format: Ok(Default::default()),
                sbom_url: Ok(Default::default()),
            }
        }
    }
    impl SecurityInsightsVersion100YamlSchemaDependenciesSbomItem {
        pub fn sbom_creation<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                Option<
                    super::SecurityInsightsVersion100YamlSchemaDependenciesSbomItemSbomCreation,
                >,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .sbom_creation = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for sbom_creation: {e}")
                });
            self
        }
        pub fn sbom_file<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Option<String>>,
            T::Error: std::fmt::Display,
        {
            self
                .sbom_file = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for sbom_file: {e}")
                });
            self
        }
        pub fn sbom_format<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Option<String>>,
            T::Error: std::fmt::Display,
        {
            self
                .sbom_format = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for sbom_format: {e}")
                });
            self
        }
        pub fn sbom_url<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Option<String>>,
            T::Error: std::fmt::Display,
        {
            self
                .sbom_url = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for sbom_url: {e}")
                });
            self
        }
    }
    impl std::convert::TryFrom<SecurityInsightsVersion100YamlSchemaDependenciesSbomItem>
    for super::SecurityInsightsVersion100YamlSchemaDependenciesSbomItem {
        type Error = String;
        fn try_from(
            value: SecurityInsightsVersion100YamlSchemaDependenciesSbomItem,
        ) -> Result<Self, String> {
            Ok(Self {
                sbom_creation: value.sbom_creation?,
                sbom_file: value.sbom_file?,
                sbom_format: value.sbom_format?,
                sbom_url: value.sbom_url?,
            })
        }
    }
    impl From<super::SecurityInsightsVersion100YamlSchemaDependenciesSbomItem>
    for SecurityInsightsVersion100YamlSchemaDependenciesSbomItem {
        fn from(
            value: super::SecurityInsightsVersion100YamlSchemaDependenciesSbomItem,
        ) -> Self {
            Self {
                sbom_creation: Ok(value.sbom_creation),
                sbom_file: Ok(value.sbom_file),
                sbom_format: Ok(value.sbom_format),
                sbom_url: Ok(value.sbom_url),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct SecurityInsightsVersion100YamlSchemaHeader {
        changelog: Result<Option<String>, String>,
        commit_hash: Result<
            Option<super::SecurityInsightsVersion100YamlSchemaHeaderCommitHash>,
            String,
        >,
        expiration_date: Result<chrono::DateTime<chrono::offset::Utc>, String>,
        last_reviewed: Result<Option<chrono::DateTime<chrono::offset::Utc>>, String>,
        last_updated: Result<Option<chrono::DateTime<chrono::offset::Utc>>, String>,
        license: Result<Option<String>, String>,
        project_release: Result<Option<String>, String>,
        project_url: Result<String, String>,
        schema_version: Result<
            super::SecurityInsightsVersion100YamlSchemaHeaderSchemaVersion,
            String,
        >,
    }
    impl Default for SecurityInsightsVersion100YamlSchemaHeader {
        fn default() -> Self {
            Self {
                changelog: Ok(Default::default()),
                commit_hash: Ok(Default::default()),
                expiration_date: Err(
                    "no value supplied for expiration_date".to_string(),
                ),
                last_reviewed: Ok(Default::default()),
                last_updated: Ok(Default::default()),
                license: Ok(Default::default()),
                project_release: Ok(Default::default()),
                project_url: Err("no value supplied for project_url".to_string()),
                schema_version: Err("no value supplied for schema_version".to_string()),
            }
        }
    }
    impl SecurityInsightsVersion100YamlSchemaHeader {
        pub fn changelog<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Option<String>>,
            T::Error: std::fmt::Display,
        {
            self
                .changelog = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for changelog: {e}")
                });
            self
        }
        pub fn commit_hash<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                Option<super::SecurityInsightsVersion100YamlSchemaHeaderCommitHash>,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .commit_hash = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for commit_hash: {e}")
                });
            self
        }
        pub fn expiration_date<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<chrono::DateTime<chrono::offset::Utc>>,
            T::Error: std::fmt::Display,
        {
            self
                .expiration_date = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for expiration_date: {e}")
                });
            self
        }
        pub fn last_reviewed<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Option<chrono::DateTime<chrono::offset::Utc>>>,
            T::Error: std::fmt::Display,
        {
            self
                .last_reviewed = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for last_reviewed: {e}")
                });
            self
        }
        pub fn last_updated<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Option<chrono::DateTime<chrono::offset::Utc>>>,
            T::Error: std::fmt::Display,
        {
            self
                .last_updated = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for last_updated: {e}")
                });
            self
        }
        pub fn license<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Option<String>>,
            T::Error: std::fmt::Display,
        {
            self
                .license = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for license: {e}")
                });
            self
        }
        pub fn project_release<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Option<String>>,
            T::Error: std::fmt::Display,
        {
            self
                .project_release = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for project_release: {e}")
                });
            self
        }
        pub fn project_url<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<String>,
            T::Error: std::fmt::Display,
        {
            self
                .project_url = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for project_url: {e}")
                });
            self
        }
        pub fn schema_version<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                super::SecurityInsightsVersion100YamlSchemaHeaderSchemaVersion,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .schema_version = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for schema_version: {e}")
                });
            self
        }
    }
    impl std::convert::TryFrom<SecurityInsightsVersion100YamlSchemaHeader>
    for super::SecurityInsightsVersion100YamlSchemaHeader {
        type Error = String;
        fn try_from(
            value: SecurityInsightsVersion100YamlSchemaHeader,
        ) -> Result<Self, String> {
            Ok(Self {
                changelog: value.changelog?,
                commit_hash: value.commit_hash?,
                expiration_date: value.expiration_date?,
                last_reviewed: value.last_reviewed?,
                last_updated: value.last_updated?,
                license: value.license?,
                project_release: value.project_release?,
                project_url: value.project_url?,
                schema_version: value.schema_version?,
            })
        }
    }
    impl From<super::SecurityInsightsVersion100YamlSchemaHeader>
    for SecurityInsightsVersion100YamlSchemaHeader {
        fn from(value: super::SecurityInsightsVersion100YamlSchemaHeader) -> Self {
            Self {
                changelog: Ok(value.changelog),
                commit_hash: Ok(value.commit_hash),
                expiration_date: Ok(value.expiration_date),
                last_reviewed: Ok(value.last_reviewed),
                last_updated: Ok(value.last_updated),
                license: Ok(value.license),
                project_release: Ok(value.project_release),
                project_url: Ok(value.project_url),
                schema_version: Ok(value.schema_version),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct SecurityInsightsVersion100YamlSchemaProjectLifecycle {
        bug_fixes_only: Result<bool, String>,
        core_maintainers: Result<Option<Vec<String>>, String>,
        release_cycle: Result<Option<String>, String>,
        release_process: Result<
            Option<
                super::SecurityInsightsVersion100YamlSchemaProjectLifecycleReleaseProcess,
            >,
            String,
        >,
        roadmap: Result<Option<String>, String>,
        status: Result<
            super::SecurityInsightsVersion100YamlSchemaProjectLifecycleStatus,
            String,
        >,
    }
    impl Default for SecurityInsightsVersion100YamlSchemaProjectLifecycle {
        fn default() -> Self {
            Self {
                bug_fixes_only: Err("no value supplied for bug_fixes_only".to_string()),
                core_maintainers: Ok(Default::default()),
                release_cycle: Ok(Default::default()),
                release_process: Ok(Default::default()),
                roadmap: Ok(Default::default()),
                status: Err("no value supplied for status".to_string()),
            }
        }
    }
    impl SecurityInsightsVersion100YamlSchemaProjectLifecycle {
        pub fn bug_fixes_only<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<bool>,
            T::Error: std::fmt::Display,
        {
            self
                .bug_fixes_only = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for bug_fixes_only: {e}")
                });
            self
        }
        pub fn core_maintainers<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Option<Vec<String>>>,
            T::Error: std::fmt::Display,
        {
            self
                .core_maintainers = value
                .try_into()
                .map_err(|e| {
                    format!(
                        "error converting supplied value for core_maintainers: {e}"
                    )
                });
            self
        }
        pub fn release_cycle<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Option<String>>,
            T::Error: std::fmt::Display,
        {
            self
                .release_cycle = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for release_cycle: {e}")
                });
            self
        }
        pub fn release_process<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                Option<
                    super::SecurityInsightsVersion100YamlSchemaProjectLifecycleReleaseProcess,
                >,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .release_process = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for release_process: {e}")
                });
            self
        }
        pub fn roadmap<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Option<String>>,
            T::Error: std::fmt::Display,
        {
            self
                .roadmap = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for roadmap: {e}")
                });
            self
        }
        pub fn status<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                super::SecurityInsightsVersion100YamlSchemaProjectLifecycleStatus,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .status = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for status: {e}")
                });
            self
        }
    }
    impl std::convert::TryFrom<SecurityInsightsVersion100YamlSchemaProjectLifecycle>
    for super::SecurityInsightsVersion100YamlSchemaProjectLifecycle {
        type Error = String;
        fn try_from(
            value: SecurityInsightsVersion100YamlSchemaProjectLifecycle,
        ) -> Result<Self, String> {
            Ok(Self {
                bug_fixes_only: value.bug_fixes_only?,
                core_maintainers: value.core_maintainers?,
                release_cycle: value.release_cycle?,
                release_process: value.release_process?,
                roadmap: value.roadmap?,
                status: value.status?,
            })
        }
    }
    impl From<super::SecurityInsightsVersion100YamlSchemaProjectLifecycle>
    for SecurityInsightsVersion100YamlSchemaProjectLifecycle {
        fn from(
            value: super::SecurityInsightsVersion100YamlSchemaProjectLifecycle,
        ) -> Self {
            Self {
                bug_fixes_only: Ok(value.bug_fixes_only),
                core_maintainers: Ok(value.core_maintainers),
                release_cycle: Ok(value.release_cycle),
                release_process: Ok(value.release_process),
                roadmap: Ok(value.roadmap),
                status: Ok(value.status),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct SecurityInsightsVersion100YamlSchemaSecurityArtifacts {
        other_artifacts: Result<Vec<serde_json::Value>, String>,
        self_assessment: Result<
            Option<
                super::SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessment,
            >,
            String,
        >,
        threat_model: Result<
            Option<
                super::SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModel,
            >,
            String,
        >,
    }
    impl Default for SecurityInsightsVersion100YamlSchemaSecurityArtifacts {
        fn default() -> Self {
            Self {
                other_artifacts: Ok(Default::default()),
                self_assessment: Ok(Default::default()),
                threat_model: Ok(Default::default()),
            }
        }
    }
    impl SecurityInsightsVersion100YamlSchemaSecurityArtifacts {
        pub fn other_artifacts<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Vec<serde_json::Value>>,
            T::Error: std::fmt::Display,
        {
            self
                .other_artifacts = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for other_artifacts: {e}")
                });
            self
        }
        pub fn self_assessment<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                Option<
                    super::SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessment,
                >,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .self_assessment = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for self_assessment: {e}")
                });
            self
        }
        pub fn threat_model<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                Option<
                    super::SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModel,
                >,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .threat_model = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for threat_model: {e}")
                });
            self
        }
    }
    impl std::convert::TryFrom<SecurityInsightsVersion100YamlSchemaSecurityArtifacts>
    for super::SecurityInsightsVersion100YamlSchemaSecurityArtifacts {
        type Error = String;
        fn try_from(
            value: SecurityInsightsVersion100YamlSchemaSecurityArtifacts,
        ) -> Result<Self, String> {
            Ok(Self {
                other_artifacts: value.other_artifacts?,
                self_assessment: value.self_assessment?,
                threat_model: value.threat_model?,
            })
        }
    }
    impl From<super::SecurityInsightsVersion100YamlSchemaSecurityArtifacts>
    for SecurityInsightsVersion100YamlSchemaSecurityArtifacts {
        fn from(
            value: super::SecurityInsightsVersion100YamlSchemaSecurityArtifacts,
        ) -> Self {
            Self {
                other_artifacts: Ok(value.other_artifacts),
                self_assessment: Ok(value.self_assessment),
                threat_model: Ok(value.threat_model),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessment {
        comment: Result<
            Option<
                super::SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessmentComment,
            >,
            String,
        >,
        evidence_url: Result<Option<Vec<String>>, String>,
        self_assessment_created: Result<bool, String>,
    }
    impl Default
    for SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessment {
        fn default() -> Self {
            Self {
                comment: Ok(Default::default()),
                evidence_url: Ok(Default::default()),
                self_assessment_created: Err(
                    "no value supplied for self_assessment_created".to_string(),
                ),
            }
        }
    }
    impl SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessment {
        pub fn comment<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                Option<
                    super::SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessmentComment,
                >,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .comment = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for comment: {e}")
                });
            self
        }
        pub fn evidence_url<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Option<Vec<String>>>,
            T::Error: std::fmt::Display,
        {
            self
                .evidence_url = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for evidence_url: {e}")
                });
            self
        }
        pub fn self_assessment_created<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<bool>,
            T::Error: std::fmt::Display,
        {
            self
                .self_assessment_created = value
                .try_into()
                .map_err(|e| {
                    format!(
                        "error converting supplied value for self_assessment_created: {e}"
                    )
                });
            self
        }
    }
    impl std::convert::TryFrom<
        SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessment,
    > for super::SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessment {
        type Error = String;
        fn try_from(
            value: SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessment,
        ) -> Result<Self, String> {
            Ok(Self {
                comment: value.comment?,
                evidence_url: value.evidence_url?,
                self_assessment_created: value.self_assessment_created?,
            })
        }
    }
    impl From<super::SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessment>
    for SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessment {
        fn from(
            value: super::SecurityInsightsVersion100YamlSchemaSecurityArtifactsSelfAssessment,
        ) -> Self {
            Self {
                comment: Ok(value.comment),
                evidence_url: Ok(value.evidence_url),
                self_assessment_created: Ok(value.self_assessment_created),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModel {
        comment: Result<
            Option<
                super::SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModelComment,
            >,
            String,
        >,
        evidence_url: Result<Option<Vec<String>>, String>,
        threat_model_created: Result<bool, String>,
    }
    impl Default for SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModel {
        fn default() -> Self {
            Self {
                comment: Ok(Default::default()),
                evidence_url: Ok(Default::default()),
                threat_model_created: Err(
                    "no value supplied for threat_model_created".to_string(),
                ),
            }
        }
    }
    impl SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModel {
        pub fn comment<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                Option<
                    super::SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModelComment,
                >,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .comment = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for comment: {e}")
                });
            self
        }
        pub fn evidence_url<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Option<Vec<String>>>,
            T::Error: std::fmt::Display,
        {
            self
                .evidence_url = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for evidence_url: {e}")
                });
            self
        }
        pub fn threat_model_created<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<bool>,
            T::Error: std::fmt::Display,
        {
            self
                .threat_model_created = value
                .try_into()
                .map_err(|e| {
                    format!(
                        "error converting supplied value for threat_model_created: {e}"
                    )
                });
            self
        }
    }
    impl std::convert::TryFrom<
        SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModel,
    > for super::SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModel {
        type Error = String;
        fn try_from(
            value: SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModel,
        ) -> Result<Self, String> {
            Ok(Self {
                comment: value.comment?,
                evidence_url: value.evidence_url?,
                threat_model_created: value.threat_model_created?,
            })
        }
    }
    impl From<super::SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModel>
    for SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModel {
        fn from(
            value: super::SecurityInsightsVersion100YamlSchemaSecurityArtifactsThreatModel,
        ) -> Self {
            Self {
                comment: Ok(value.comment),
                evidence_url: Ok(value.evidence_url),
                threat_model_created: Ok(value.threat_model_created),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItem {
        auditor_name: Result<String, String>,
        auditor_report: Result<Option<String>, String>,
        auditor_url: Result<String, String>,
        comment: Result<
            Option<
                super::SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItemComment,
            >,
            String,
        >,
        report_year: Result<i64, String>,
    }
    impl Default for SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItem {
        fn default() -> Self {
            Self {
                auditor_name: Err("no value supplied for auditor_name".to_string()),
                auditor_report: Ok(Default::default()),
                auditor_url: Err("no value supplied for auditor_url".to_string()),
                comment: Ok(Default::default()),
                report_year: Err("no value supplied for report_year".to_string()),
            }
        }
    }
    impl SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItem {
        pub fn auditor_name<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<String>,
            T::Error: std::fmt::Display,
        {
            self
                .auditor_name = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for auditor_name: {e}")
                });
            self
        }
        pub fn auditor_report<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Option<String>>,
            T::Error: std::fmt::Display,
        {
            self
                .auditor_report = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for auditor_report: {e}")
                });
            self
        }
        pub fn auditor_url<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<String>,
            T::Error: std::fmt::Display,
        {
            self
                .auditor_url = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for auditor_url: {e}")
                });
            self
        }
        pub fn comment<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                Option<
                    super::SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItemComment,
                >,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .comment = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for comment: {e}")
                });
            self
        }
        pub fn report_year<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<i64>,
            T::Error: std::fmt::Display,
        {
            self
                .report_year = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for report_year: {e}")
                });
            self
        }
    }
    impl std::convert::TryFrom<
        SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItem,
    > for super::SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItem {
        type Error = String;
        fn try_from(
            value: SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItem,
        ) -> Result<Self, String> {
            Ok(Self {
                auditor_name: value.auditor_name?,
                auditor_report: value.auditor_report?,
                auditor_url: value.auditor_url?,
                comment: value.comment?,
                report_year: value.report_year?,
            })
        }
    }
    impl From<super::SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItem>
    for SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItem {
        fn from(
            value: super::SecurityInsightsVersion100YamlSchemaSecurityAssessmentsItem,
        ) -> Self {
            Self {
                auditor_name: Ok(value.auditor_name),
                auditor_report: Ok(value.auditor_report),
                auditor_url: Ok(value.auditor_url),
                comment: Ok(value.comment),
                report_year: Ok(value.report_year),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct SecurityInsightsVersion100YamlSchemaSecurityContactsItem {
        primary: Result<Option<bool>, String>,
        type_: Result<
            super::SecurityInsightsVersion100YamlSchemaSecurityContactsItemType,
            String,
        >,
        value: Result<
            super::SecurityInsightsVersion100YamlSchemaSecurityContactsItemValue,
            String,
        >,
    }
    impl Default for SecurityInsightsVersion100YamlSchemaSecurityContactsItem {
        fn default() -> Self {
            Self {
                primary: Ok(Default::default()),
                type_: Err("no value supplied for type_".to_string()),
                value: Err("no value supplied for value".to_string()),
            }
        }
    }
    impl SecurityInsightsVersion100YamlSchemaSecurityContactsItem {
        pub fn primary<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Option<bool>>,
            T::Error: std::fmt::Display,
        {
            self
                .primary = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for primary: {e}")
                });
            self
        }
        pub fn type_<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                super::SecurityInsightsVersion100YamlSchemaSecurityContactsItemType,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .type_ = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for type_: {e}")
                });
            self
        }
        pub fn value<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                super::SecurityInsightsVersion100YamlSchemaSecurityContactsItemValue,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .value = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for value: {e}")
                });
            self
        }
    }
    impl std::convert::TryFrom<SecurityInsightsVersion100YamlSchemaSecurityContactsItem>
    for super::SecurityInsightsVersion100YamlSchemaSecurityContactsItem {
        type Error = String;
        fn try_from(
            value: SecurityInsightsVersion100YamlSchemaSecurityContactsItem,
        ) -> Result<Self, String> {
            Ok(Self {
                primary: value.primary?,
                type_: value.type_?,
                value: value.value?,
            })
        }
    }
    impl From<super::SecurityInsightsVersion100YamlSchemaSecurityContactsItem>
    for SecurityInsightsVersion100YamlSchemaSecurityContactsItem {
        fn from(
            value: super::SecurityInsightsVersion100YamlSchemaSecurityContactsItem,
        ) -> Self {
            Self {
                primary: Ok(value.primary),
                type_: Ok(value.type_),
                value: Ok(value.value),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct SecurityInsightsVersion100YamlSchemaSecurityTestingItem {
        comment: Result<
            Option<
                super::SecurityInsightsVersion100YamlSchemaSecurityTestingItemComment,
            >,
            String,
        >,
        integration: Result<
            super::SecurityInsightsVersion100YamlSchemaSecurityTestingItemIntegration,
            String,
        >,
        tool_name: Result<String, String>,
        tool_rulesets: Result<Option<Vec<String>>, String>,
        tool_type: Result<
            super::SecurityInsightsVersion100YamlSchemaSecurityTestingItemToolType,
            String,
        >,
        tool_url: Result<Option<String>, String>,
        tool_version: Result<String, String>,
    }
    impl Default for SecurityInsightsVersion100YamlSchemaSecurityTestingItem {
        fn default() -> Self {
            Self {
                comment: Ok(Default::default()),
                integration: Err("no value supplied for integration".to_string()),
                tool_name: Err("no value supplied for tool_name".to_string()),
                tool_rulesets: Ok(Default::default()),
                tool_type: Err("no value supplied for tool_type".to_string()),
                tool_url: Ok(Default::default()),
                tool_version: Err("no value supplied for tool_version".to_string()),
            }
        }
    }
    impl SecurityInsightsVersion100YamlSchemaSecurityTestingItem {
        pub fn comment<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                Option<
                    super::SecurityInsightsVersion100YamlSchemaSecurityTestingItemComment,
                >,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .comment = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for comment: {e}")
                });
            self
        }
        pub fn integration<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                super::SecurityInsightsVersion100YamlSchemaSecurityTestingItemIntegration,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .integration = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for integration: {e}")
                });
            self
        }
        pub fn tool_name<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<String>,
            T::Error: std::fmt::Display,
        {
            self
                .tool_name = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for tool_name: {e}")
                });
            self
        }
        pub fn tool_rulesets<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Option<Vec<String>>>,
            T::Error: std::fmt::Display,
        {
            self
                .tool_rulesets = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for tool_rulesets: {e}")
                });
            self
        }
        pub fn tool_type<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                super::SecurityInsightsVersion100YamlSchemaSecurityTestingItemToolType,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .tool_type = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for tool_type: {e}")
                });
            self
        }
        pub fn tool_url<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Option<String>>,
            T::Error: std::fmt::Display,
        {
            self
                .tool_url = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for tool_url: {e}")
                });
            self
        }
        pub fn tool_version<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<String>,
            T::Error: std::fmt::Display,
        {
            self
                .tool_version = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for tool_version: {e}")
                });
            self
        }
    }
    impl std::convert::TryFrom<SecurityInsightsVersion100YamlSchemaSecurityTestingItem>
    for super::SecurityInsightsVersion100YamlSchemaSecurityTestingItem {
        type Error = String;
        fn try_from(
            value: SecurityInsightsVersion100YamlSchemaSecurityTestingItem,
        ) -> Result<Self, String> {
            Ok(Self {
                comment: value.comment?,
                integration: value.integration?,
                tool_name: value.tool_name?,
                tool_rulesets: value.tool_rulesets?,
                tool_type: value.tool_type?,
                tool_url: value.tool_url?,
                tool_version: value.tool_version?,
            })
        }
    }
    impl From<super::SecurityInsightsVersion100YamlSchemaSecurityTestingItem>
    for SecurityInsightsVersion100YamlSchemaSecurityTestingItem {
        fn from(
            value: super::SecurityInsightsVersion100YamlSchemaSecurityTestingItem,
        ) -> Self {
            Self {
                comment: Ok(value.comment),
                integration: Ok(value.integration),
                tool_name: Ok(value.tool_name),
                tool_rulesets: Ok(value.tool_rulesets),
                tool_type: Ok(value.tool_type),
                tool_url: Ok(value.tool_url),
                tool_version: Ok(value.tool_version),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct SecurityInsightsVersion100YamlSchemaSecurityTestingItemIntegration {
        ad_hoc: Result<bool, String>,
        before_release: Result<bool, String>,
        ci: Result<bool, String>,
    }
    impl Default for SecurityInsightsVersion100YamlSchemaSecurityTestingItemIntegration {
        fn default() -> Self {
            Self {
                ad_hoc: Err("no value supplied for ad_hoc".to_string()),
                before_release: Err("no value supplied for before_release".to_string()),
                ci: Err("no value supplied for ci".to_string()),
            }
        }
    }
    impl SecurityInsightsVersion100YamlSchemaSecurityTestingItemIntegration {
        pub fn ad_hoc<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<bool>,
            T::Error: std::fmt::Display,
        {
            self
                .ad_hoc = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for ad_hoc: {e}")
                });
            self
        }
        pub fn before_release<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<bool>,
            T::Error: std::fmt::Display,
        {
            self
                .before_release = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for before_release: {e}")
                });
            self
        }
        pub fn ci<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<bool>,
            T::Error: std::fmt::Display,
        {
            self
                .ci = value
                .try_into()
                .map_err(|e| format!("error converting supplied value for ci: {e}"));
            self
        }
    }
    impl std::convert::TryFrom<
        SecurityInsightsVersion100YamlSchemaSecurityTestingItemIntegration,
    > for super::SecurityInsightsVersion100YamlSchemaSecurityTestingItemIntegration {
        type Error = String;
        fn try_from(
            value: SecurityInsightsVersion100YamlSchemaSecurityTestingItemIntegration,
        ) -> Result<Self, String> {
            Ok(Self {
                ad_hoc: value.ad_hoc?,
                before_release: value.before_release?,
                ci: value.ci?,
            })
        }
    }
    impl From<super::SecurityInsightsVersion100YamlSchemaSecurityTestingItemIntegration>
    for SecurityInsightsVersion100YamlSchemaSecurityTestingItemIntegration {
        fn from(
            value: super::SecurityInsightsVersion100YamlSchemaSecurityTestingItemIntegration,
        ) -> Self {
            Self {
                ad_hoc: Ok(value.ad_hoc),
                before_release: Ok(value.before_release),
                ci: Ok(value.ci),
            }
        }
    }
    #[derive(Clone, Debug)]
    pub struct SecurityInsightsVersion100YamlSchemaVulnerabilityReporting {
        accepts_vulnerability_reports: Result<bool, String>,
        bug_bounty_available: Result<Option<bool>, String>,
        bug_bounty_url: Result<Option<String>, String>,
        comment: Result<
            Option<
                super::SecurityInsightsVersion100YamlSchemaVulnerabilityReportingComment,
            >,
            String,
        >,
        email_contact: Result<Option<String>, String>,
        in_scope: Result<
            Option<
                Vec<
                    super::SecurityInsightsVersion100YamlSchemaVulnerabilityReportingInScopeItem,
                >,
            >,
            String,
        >,
        out_scope: Result<
            Option<
                Vec<
                    super::SecurityInsightsVersion100YamlSchemaVulnerabilityReportingOutScopeItem,
                >,
            >,
            String,
        >,
        pgp_key: Result<
            Option<
                super::SecurityInsightsVersion100YamlSchemaVulnerabilityReportingPgpKey,
            >,
            String,
        >,
        security_policy: Result<Option<String>, String>,
    }
    impl Default for SecurityInsightsVersion100YamlSchemaVulnerabilityReporting {
        fn default() -> Self {
            Self {
                accepts_vulnerability_reports: Err(
                    "no value supplied for accepts_vulnerability_reports".to_string(),
                ),
                bug_bounty_available: Ok(Default::default()),
                bug_bounty_url: Ok(Default::default()),
                comment: Ok(Default::default()),
                email_contact: Ok(Default::default()),
                in_scope: Ok(Default::default()),
                out_scope: Ok(Default::default()),
                pgp_key: Ok(Default::default()),
                security_policy: Ok(Default::default()),
            }
        }
    }
    impl SecurityInsightsVersion100YamlSchemaVulnerabilityReporting {
        pub fn accepts_vulnerability_reports<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<bool>,
            T::Error: std::fmt::Display,
        {
            self
                .accepts_vulnerability_reports = value
                .try_into()
                .map_err(|e| {
                    format!(
                        "error converting supplied value for accepts_vulnerability_reports: {e}"
                    )
                });
            self
        }
        pub fn bug_bounty_available<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Option<bool>>,
            T::Error: std::fmt::Display,
        {
            self
                .bug_bounty_available = value
                .try_into()
                .map_err(|e| {
                    format!(
                        "error converting supplied value for bug_bounty_available: {e}"
                    )
                });
            self
        }
        pub fn bug_bounty_url<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Option<String>>,
            T::Error: std::fmt::Display,
        {
            self
                .bug_bounty_url = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for bug_bounty_url: {e}")
                });
            self
        }
        pub fn comment<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                Option<
                    super::SecurityInsightsVersion100YamlSchemaVulnerabilityReportingComment,
                >,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .comment = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for comment: {e}")
                });
            self
        }
        pub fn email_contact<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Option<String>>,
            T::Error: std::fmt::Display,
        {
            self
                .email_contact = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for email_contact: {e}")
                });
            self
        }
        pub fn in_scope<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                Option<
                    Vec<
                        super::SecurityInsightsVersion100YamlSchemaVulnerabilityReportingInScopeItem,
                    >,
                >,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .in_scope = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for in_scope: {e}")
                });
            self
        }
        pub fn out_scope<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                Option<
                    Vec<
                        super::SecurityInsightsVersion100YamlSchemaVulnerabilityReportingOutScopeItem,
                    >,
                >,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .out_scope = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for out_scope: {e}")
                });
            self
        }
        pub fn pgp_key<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<
                Option<
                    super::SecurityInsightsVersion100YamlSchemaVulnerabilityReportingPgpKey,
                >,
            >,
            T::Error: std::fmt::Display,
        {
            self
                .pgp_key = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for pgp_key: {e}")
                });
            self
        }
        pub fn security_policy<T>(mut self, value: T) -> Self
        where
            T: std::convert::TryInto<Option<String>>,
            T::Error: std::fmt::Display,
        {
            self
                .security_policy = value
                .try_into()
                .map_err(|e| {
                    format!("error converting supplied value for security_policy: {e}")
                });
            self
        }
    }
    impl std::convert::TryFrom<
        SecurityInsightsVersion100YamlSchemaVulnerabilityReporting,
    > for super::SecurityInsightsVersion100YamlSchemaVulnerabilityReporting {
        type Error = String;
        fn try_from(
            value: SecurityInsightsVersion100YamlSchemaVulnerabilityReporting,
        ) -> Result<Self, String> {
            Ok(Self {
                accepts_vulnerability_reports: value.accepts_vulnerability_reports?,
                bug_bounty_available: value.bug_bounty_available?,
                bug_bounty_url: value.bug_bounty_url?,
                comment: value.comment?,
                email_contact: value.email_contact?,
                in_scope: value.in_scope?,
                out_scope: value.out_scope?,
                pgp_key: value.pgp_key?,
                security_policy: value.security_policy?,
            })
        }
    }
    impl From<super::SecurityInsightsVersion100YamlSchemaVulnerabilityReporting>
    for SecurityInsightsVersion100YamlSchemaVulnerabilityReporting {
        fn from(
            value: super::SecurityInsightsVersion100YamlSchemaVulnerabilityReporting,
        ) -> Self {
            Self {
                accepts_vulnerability_reports: Ok(value.accepts_vulnerability_reports),
                bug_bounty_available: Ok(value.bug_bounty_available),
                bug_bounty_url: Ok(value.bug_bounty_url),
                comment: Ok(value.comment),
                email_contact: Ok(value.email_contact),
                in_scope: Ok(value.in_scope),
                out_scope: Ok(value.out_scope),
                pgp_key: Ok(value.pgp_key),
                security_policy: Ok(value.security_policy),
            }
        }
    }
}